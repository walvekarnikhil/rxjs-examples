[
  {
    "title": "A Roadmap for Angular",
    "pubDate": "2020-08-06 00:47:40",
    "link": "https://blog.angular.io/a-roadmap-for-angular-1b4fa996a771?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/1b4fa996a771",
    "author": "Jules Kremer",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*CVQ82GDdKMRUokiw",
    "description": "\n<p>At the beginning of 2020 at <a href=\"https://www.youtube.com/watch?v=Uz2D8QjQAIE\">ng-conf Hardwired</a>, I talked about how we were evolving the team, improving our processes, and working to build stronger connections with the Angular community. One of the most important steps we are taking towards these goals is sharing more about what we’re working on, and some of the projects we’re considering for the future.</p>\n<p>Today we’re adding a page on angular.io with our <a href=\"https://angular.io/guide/roadmap\">roadmap</a>, which we’ll maintain at least quarterly ongoing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CVQ82GDdKMRUokiw\"><figcaption>A Maui Rainbow</figcaption></figure><h3>Our Process</h3>\n<p>This is the first time we’ve published a formal roadmap, so please bear with us as we calibrate and work to share more over time.</p>\n<p>Angular receives a huge number of feature requests, both from inside Google and from the broader open-source community. At the same time, our list of projects also contains maintenance tasks, code refactorings, potential performance improvements, and so on. Throughout this, we work to bring together representatives from developer relations, product management, and engineering in order to prioritize this list. As new projects come into the queue, we regularly position them based on relative priority to other projects. As work gets done, projects will move up in the queue.</p>\n<h3>The Roadmap</h3>\n<p>We see immense value in publishing our roadmap. In the current state of the <a href=\"https://angular.io/guide/roadmap\">roadmap</a>, you can find all the projects from our backlog that are already in-progress, or that we’ll be working on soon. There’s much more we’re planning to do, but we want to start small with the work that is high in our priority list. For transparency, we include work that affects Angular’s own development and projects that apply only to internal development within Google.</p>\n<p>We’ve divided the document into two sections representing the in-progress projects as well as the future roadmap. You can expect the work to land in future releases depending on when they are completed and their impact on the public API of Angular. Since we’re following <a href=\"https://semver.org/\">semantic versioning</a>, new features will land in minor or major releases and backward-incompatible changes in major versions.</p>\n<h3>What’s Next?</h3>\n<p>Keep an eye on the roadmap! Based on our continuous prioritization process, you’ll see it evolving — some projects may shift, and new ones will be popping up.</p>\n<p>We see the roadmap release as a footprint for increasing the visibility of our engineering processes. This is the foundation for improving our collaboration with the community to grow Angular and move the Web forward together.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1b4fa996a771\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/a-roadmap-for-angular-1b4fa996a771\">A Roadmap for Angular</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<p>At the beginning of 2020 at <a href=\"https://www.youtube.com/watch?v=Uz2D8QjQAIE\">ng-conf Hardwired</a>, I talked about how we were evolving the team, improving our processes, and working to build stronger connections with the Angular community. One of the most important steps we are taking towards these goals is sharing more about what we’re working on, and some of the projects we’re considering for the future.</p>\n<p>Today we’re adding a page on angular.io with our <a href=\"https://angular.io/guide/roadmap\">roadmap</a>, which we’ll maintain at least quarterly ongoing.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*CVQ82GDdKMRUokiw\"><figcaption>A Maui Rainbow</figcaption></figure><h3>Our Process</h3>\n<p>This is the first time we’ve published a formal roadmap, so please bear with us as we calibrate and work to share more over time.</p>\n<p>Angular receives a huge number of feature requests, both from inside Google and from the broader open-source community. At the same time, our list of projects also contains maintenance tasks, code refactorings, potential performance improvements, and so on. Throughout this, we work to bring together representatives from developer relations, product management, and engineering in order to prioritize this list. As new projects come into the queue, we regularly position them based on relative priority to other projects. As work gets done, projects will move up in the queue.</p>\n<h3>The Roadmap</h3>\n<p>We see immense value in publishing our roadmap. In the current state of the <a href=\"https://angular.io/guide/roadmap\">roadmap</a>, you can find all the projects from our backlog that are already in-progress, or that we’ll be working on soon. There’s much more we’re planning to do, but we want to start small with the work that is high in our priority list. For transparency, we include work that affects Angular’s own development and projects that apply only to internal development within Google.</p>\n<p>We’ve divided the document into two sections representing the in-progress projects as well as the future roadmap. You can expect the work to land in future releases depending on when they are completed and their impact on the public API of Angular. Since we’re following <a href=\"https://semver.org/\">semantic versioning</a>, new features will land in minor or major releases and backward-incompatible changes in major versions.</p>\n<h3>What’s Next?</h3>\n<p>Keep an eye on the roadmap! Based on our continuous prioritization process, you’ll see it evolving — some projects may shift, and new ones will be popping up.</p>\n<p>We see the roadmap release as a footprint for increasing the visibility of our engineering processes. This is the foundation for improving our collaboration with the community to grow Angular and move the Web forward together.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=1b4fa996a771\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/a-roadmap-for-angular-1b4fa996a771\">A Roadmap for Angular</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "web-development",
      "javascript",
      "angular",
      "typescript"
    ]
  },
  {
    "title": "Version 10 of Angular Now Available",
    "pubDate": "2020-06-25 01:20:15",
    "link": "https://blog.angular.io/version-10-of-angular-now-available-78960babd41?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/78960babd41",
    "author": "Stephen Fluin",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*NW08J81iLpExTFTz4wnWHQ.jpeg",
    "description": "\n<p>Version 10.0.0 is here! This is a <a href=\"https://semver.org/#spec-item-8\">major</a> release that spans the entire platform, including the framework, Angular Material, and the CLI. This release is smaller than typical; it has only been 4 months since we released version 9.0 of Angular.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NW08J81iLpExTFTz4wnWHQ.jpeg\"><figcaption>Photo of Butterfly Beach by Minko Gechev</figcaption></figure><p>We try to release two major versions each year to keep Angular synchronized with the rest of the JavaScript ecosystem and to have a predictable schedule. We plan to release version 11 this fall.</p>\n<h3>What’s in this release?</h3>\n<p><strong>New Date Range Picker</strong></p>\n<p>Angular Material now includes a new date range picker.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/410/0*ruU5G-8_hqEp3UBY\"><figcaption>Image of the new date range picker</figcaption></figure><p>To use the new date range picker, you can use the mat-date-range-input and mat-date-range-picker components.</p>\n<p>See <a href=\"https://stackblitz.com/angular/nknyovevygv?file=src%2Fapp%2Fdate-range-picker-overview-example.html\">this example on StackBlitz</a>.</p>\n<p>Learn more about <a href=\"https://next.material.angular.io/components/datepicker/overview#date-range-selection\">date range selection</a>.</p>\n<p><strong>Warnings about CommonJS imports</strong></p>\n<p>When you use a dependency that is packaged with CommonJS, it can result in <a href=\"https://web.dev/commonjs-larger-bundles/\">larger slower applications</a>.</p>\n<p>Starting with version 10, we now warn you when your build pulls in one of these bundles. If you’ve started seeing these warnings for your dependencies, let your dependency know that you’d prefer an ECMAScript module (ESM) bundle.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*udjNtSSP-495QNzL\"><figcaption>CommonJS or AMD dependencies can cause optimization bailouts</figcaption></figure><p><strong>Optional Stricter Settings</strong></p>\n<p>Version 10 offers a more strict project setup when you create a new workspace with ng new.</p>\n<pre>ng new --strict</pre>\n<p>Enabling this flag initializes your new project with a few new settings that improve maintainability, help you catch bugs ahead of time, and allow the CLI to perform advanced optimizations on your app. Specifically, the strict flag does the following:</p>\n<ul>\n<li>Enables strict mode in TypeScript</li>\n<li>Turns template type checking to Strict</li>\n<li>Default bundle budgets have been reduced by ~75%</li>\n<li>Configures linting rules to <a href=\"https://palantir.github.io/tslint/rules/no-any/\">prevent declarations of type </a><a href=\"https://palantir.github.io/tslint/rules/no-any/\">any</a>\n</li>\n<li>Configures your app as side-effect free to enable more advanced tree-shaking</li>\n</ul>\n<p><strong>Keeping Up to Date with the Ecosystem</strong></p>\n<p>As usual, we have made a few updates to the dependencies of Angular to stay synchronized with the JavaScript ecosystem.</p>\n<ul>\n<li>TypeScript bumped to <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html\">TypeScript 3.9</a>\n</li>\n<li>TSLib has been updated to v<a href=\"https://github.com/microsoft/tslib/releases/tag/2.0.0\">2.0</a>\n</li>\n<li>TSLint has been updated to v6</li>\n</ul>\n<p>We’ve also updated our project layout. Starting with version 10 you will see a new tsconfig.base.json. This additional <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json file</a> better supports the way that IDEs and build tooling resolve type and package configurations.</p>\n<p><strong>New Default Browser Configuration</strong></p>\n<p>We’ve updated the browser configuration for new projects to exclude older and less used browsers.</p>\n<p><strong>v9 Defaults</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/787/0*jhzqz-biEH3Bd7zQ\"></figure><p><strong>v10 Defaults</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/685/0*kLsNxh2hOj_aQ8HV\"></figure><p>This has the side effect of disabling ES5 builds by default for new projects. To enable ES5 builds and differential loading for browsers that require it (such as IE or UC Browser), simply <a href=\"https://github.com/browserslist/browserslist#browserslist-\">add the browsers you need to support</a> in the .browserslistrc file.</p>\n<p><strong>Angular Team Fixit</strong></p>\n<p>We’ve dramatically increased our investment in working with the community. In the last three weeks our open issue count has decreased by over 700 issues across <a href=\"https://github.com/angular/angular/issues\">framework</a>, <a href=\"https://github.com/angular/angular-cli/issues\">tooling</a>, and <a href=\"https://github.com/angular/components/issues\">components</a>. We’ve touched over 2,000 issues, and we plan to make large investments over the next few months, working with the community to do even more.</p>\n<p><strong>Deprecations and Removals</strong></p>\n<p>We’ve made several new deprecations and removals from Angular.</p>\n<p>The <a href=\"https://g.co/ng/apf\">Angular Package Format</a> no longer includes ESM5 or FESM5 bundles, saving you 119MB of download and install time when running yarn or npm install for Angular packages and libraries. These formats are no longer needed as any downleveling to support ES5 is done at the end of the build process.</p>\n<p>Based on heavy consultation with the community, we are deprecating support for older browsers including IE 9, 10, and <a href=\"https://en.wikipedia.org/wiki/Internet_Explorer_Mobile\">Internet Explorer Mobile</a>.</p>\n<p>You can <a href=\"http://v10.angular.io/guide/deprecations\">read more about our deprecations and removals</a>.</p>\n<h3>How to update to version 10</h3>\n<p>Visit <a href=\"https://update.angular.io/\">update.angular.io</a> for detailed information and guidance. To have the best update experience, we recommend always upgrading one major release at a time.</p>\n<p>To update:</p>\n<pre>ng update @angular/cli @angular/core</pre>\n<p>You can read more about this update in our <a href=\"https://v10.angular.io/guide/updating-to-version-10\">Updating to version 10 guide</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=78960babd41\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/version-10-of-angular-now-available-78960babd41\">Version 10 of Angular Now Available</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<p>Version 10.0.0 is here! This is a <a href=\"https://semver.org/#spec-item-8\">major</a> release that spans the entire platform, including the framework, Angular Material, and the CLI. This release is smaller than typical; it has only been 4 months since we released version 9.0 of Angular.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NW08J81iLpExTFTz4wnWHQ.jpeg\"><figcaption>Photo of Butterfly Beach by Minko Gechev</figcaption></figure><p>We try to release two major versions each year to keep Angular synchronized with the rest of the JavaScript ecosystem and to have a predictable schedule. We plan to release version 11 this fall.</p>\n<h3>What’s in this release?</h3>\n<p><strong>New Date Range Picker</strong></p>\n<p>Angular Material now includes a new date range picker.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/410/0*ruU5G-8_hqEp3UBY\"><figcaption>Image of the new date range picker</figcaption></figure><p>To use the new date range picker, you can use the mat-date-range-input and mat-date-range-picker components.</p>\n<p>See <a href=\"https://stackblitz.com/angular/nknyovevygv?file=src%2Fapp%2Fdate-range-picker-overview-example.html\">this example on StackBlitz</a>.</p>\n<p>Learn more about <a href=\"https://next.material.angular.io/components/datepicker/overview#date-range-selection\">date range selection</a>.</p>\n<p><strong>Warnings about CommonJS imports</strong></p>\n<p>When you use a dependency that is packaged with CommonJS, it can result in <a href=\"https://web.dev/commonjs-larger-bundles/\">larger slower applications</a>.</p>\n<p>Starting with version 10, we now warn you when your build pulls in one of these bundles. If you’ve started seeing these warnings for your dependencies, let your dependency know that you’d prefer an ECMAScript module (ESM) bundle.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*udjNtSSP-495QNzL\"><figcaption>CommonJS or AMD dependencies can cause optimization bailouts</figcaption></figure><p><strong>Optional Stricter Settings</strong></p>\n<p>Version 10 offers a more strict project setup when you create a new workspace with ng new.</p>\n<pre>ng new --strict</pre>\n<p>Enabling this flag initializes your new project with a few new settings that improve maintainability, help you catch bugs ahead of time, and allow the CLI to perform advanced optimizations on your app. Specifically, the strict flag does the following:</p>\n<ul>\n<li>Enables strict mode in TypeScript</li>\n<li>Turns template type checking to Strict</li>\n<li>Default bundle budgets have been reduced by ~75%</li>\n<li>Configures linting rules to <a href=\"https://palantir.github.io/tslint/rules/no-any/\">prevent declarations of type </a><a href=\"https://palantir.github.io/tslint/rules/no-any/\">any</a>\n</li>\n<li>Configures your app as side-effect free to enable more advanced tree-shaking</li>\n</ul>\n<p><strong>Keeping Up to Date with the Ecosystem</strong></p>\n<p>As usual, we have made a few updates to the dependencies of Angular to stay synchronized with the JavaScript ecosystem.</p>\n<ul>\n<li>TypeScript bumped to <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-9.html\">TypeScript 3.9</a>\n</li>\n<li>TSLib has been updated to v<a href=\"https://github.com/microsoft/tslib/releases/tag/2.0.0\">2.0</a>\n</li>\n<li>TSLint has been updated to v6</li>\n</ul>\n<p>We’ve also updated our project layout. Starting with version 10 you will see a new tsconfig.base.json. This additional <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json file</a> better supports the way that IDEs and build tooling resolve type and package configurations.</p>\n<p><strong>New Default Browser Configuration</strong></p>\n<p>We’ve updated the browser configuration for new projects to exclude older and less used browsers.</p>\n<p><strong>v9 Defaults</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/787/0*jhzqz-biEH3Bd7zQ\"></figure><p><strong>v10 Defaults</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/685/0*kLsNxh2hOj_aQ8HV\"></figure><p>This has the side effect of disabling ES5 builds by default for new projects. To enable ES5 builds and differential loading for browsers that require it (such as IE or UC Browser), simply <a href=\"https://github.com/browserslist/browserslist#browserslist-\">add the browsers you need to support</a> in the .browserslistrc file.</p>\n<p><strong>Angular Team Fixit</strong></p>\n<p>We’ve dramatically increased our investment in working with the community. In the last three weeks our open issue count has decreased by over 700 issues across <a href=\"https://github.com/angular/angular/issues\">framework</a>, <a href=\"https://github.com/angular/angular-cli/issues\">tooling</a>, and <a href=\"https://github.com/angular/components/issues\">components</a>. We’ve touched over 2,000 issues, and we plan to make large investments over the next few months, working with the community to do even more.</p>\n<p><strong>Deprecations and Removals</strong></p>\n<p>We’ve made several new deprecations and removals from Angular.</p>\n<p>The <a href=\"https://g.co/ng/apf\">Angular Package Format</a> no longer includes ESM5 or FESM5 bundles, saving you 119MB of download and install time when running yarn or npm install for Angular packages and libraries. These formats are no longer needed as any downleveling to support ES5 is done at the end of the build process.</p>\n<p>Based on heavy consultation with the community, we are deprecating support for older browsers including IE 9, 10, and <a href=\"https://en.wikipedia.org/wiki/Internet_Explorer_Mobile\">Internet Explorer Mobile</a>.</p>\n<p>You can <a href=\"http://v10.angular.io/guide/deprecations\">read more about our deprecations and removals</a>.</p>\n<h3>How to update to version 10</h3>\n<p>Visit <a href=\"https://update.angular.io/\">update.angular.io</a> for detailed information and guidance. To have the best update experience, we recommend always upgrading one major release at a time.</p>\n<p>To update:</p>\n<pre>ng update @angular/cli @angular/core</pre>\n<p>You can read more about this update in our <a href=\"https://v10.angular.io/guide/updating-to-version-10\">Updating to version 10 guide</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=78960babd41\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/version-10-of-angular-now-available-78960babd41\">Version 10 of Angular Now Available</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "javascript",
      "angular",
      "release-notes",
      "software-development",
      "web-development"
    ]
  },
  {
    "title": "Leveraging Angular Prereleases to keep Ionic in Sync",
    "pubDate": "2020-06-23 22:47:24",
    "link": "https://blog.angular.io/leveraging-angular-prereleases-to-keep-ionic-in-sync-2cf5818b8389?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/2cf5818b8389",
    "author": "Mike Hartington",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*n0NH4YppjJVqZ-ksDuJuMg.png",
    "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*n0NH4YppjJVqZ-ksDuJuMg.png\"></figure><p>Unlike other open source projects, Angular tries to bring a new major release at least twice a year. With each new release, Angular stands by its commitment to ensuring the upgrade process is easier every time.</p>\n<p>In fact, we noticed recently that the Angular team was preparing for a new major release, v10. By keeping an eye on the number of RC releases, we could tell that v10 is just around the corner and knew we needed to start testing for support with our open source projects.</p>\n<p>Our open source UI library, Ionic Framework, depends heavily on Angular. And given that our ionic/ angular package is <a href=\"https://appfigures.com/top-sdks/development/all\">powering roughly 20%</a> of all the apps in both Google Play and the iOS App Stores, we think it’s pretty important for us to manage these updates in a safe and reliable way.</p>\n<p>With that in mind, we thought it would be fun to share some insight on how we prepare and manage Angular updates — at both the app level and library level — and in turn, make sure millions of users have a great upgrade experience. So let’s dive in.</p>\n<h3>Quick overview of Ionic</h3>\n<p>If you’re not familiar with <a href=\"http://ionicframework.com/\">Ionic</a>, we’re a mobile development kit for web developers. You write your apps using familiar web languages and your JavaScript framework of choice (Angular, of course), and we give you the tools to build and deploy those apps on mobile.</p>\n<p>Now, because Ionic Framework is a library, and not the native mobile app itself, updating Ionic Framework isn’t the same as updating an app that is built with Ionic. So keep that in mind as we go ahead.</p>\n<h3>Status report!</h3>\n<p>One of the first things we look for is to ensure that everything works between major versions. Angular has always been very consistent about making sure that major releases should just work for more people, and that includes us at Ionic. The very first thing we’ll do is read through the <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">changelog</a> and see if anything stands out. But sometimes the quick and easiest way to find out the state of things is to just test it out in real apps.</p>\n<p>So when we see a new RC of a major version is released, we’ll run it through our collection of testing apps. This includes features like the conference app, star track, as well as a few other internal apps. Most of the time everything works great!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FGnBPjVwamissfnn\"></figure><p>There have been a few times, however, that we’ve noticed an issue in Ionic that probably existed beforehand but wasn’t obvious. This may sound like a disaster but it actually ends up being valuable for us because it means that by addressing it, we’re making Ionic even more stable, providing a better overall experience.</p>\n<p>Once we validate things at the app level, we then take it further and look at the library level.</p>\n<h3>Updating Ionic’s internals</h3>\n<p>For Ionic itself, we take a slightly different approach to managing upgrades. Since Ionic Framework’s release cycle is different from Angular, we end up supporting a few different major versions of Angular in our package.json. Given Angular’s commitment to stability, this works really well. Currently we support a range from 8.2 to the latest 9.x. Much of this success has to do with how we use Angular internally as well as Angular’s own stability.</p>\n<p>We also follow the best practices for libraries that are built for Angular. In doing so, we built @ionic/angular using <a href=\"https://github.com/ng-packagr/ng-packagr\">ng-packagr</a>, which manages all the work for a build process of an Angular library.</p>\n<p>While we support multiple previous versions of Angular in any given Ionic release, like all good things, they must come to an end and we do eventually make a hard cut and drop support for some past versions. We make this call by looking at what our community members are reporting for their Angular usage. This typically ends up being n-1, so whatever Angular’s latest stable release, plus one version behind.</p>\n<p>When we absolutely need a new feature/fix, we eventually make the call to build @ionic/angular against a newer version of Angular and adjust our peer dependencies.</p>\n<h3>Parting thoughts</h3>\n<p>Well here we are. We made it through another major release of Angular and as expected, we had an easy time updating Ionic for users. Hopefully this can help shed some light on why we build against certain versions of Angular, why starters sometimes have locked versions, and how we approach managing updates across a project. Given the number of apps out there that are built with Ionic and Angular, it’s important for us to get this right, or else we’ll have some upset users!</p>\n<p>So as we prepare for version 10.0, you can be sure that we will be going through this testing process and getting ready along with you.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2cf5818b8389\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/leveraging-angular-prereleases-to-keep-ionic-in-sync-2cf5818b8389\">Leveraging Angular Prereleases to keep Ionic in Sync</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*n0NH4YppjJVqZ-ksDuJuMg.png\"></figure><p>Unlike other open source projects, Angular tries to bring a new major release at least twice a year. With each new release, Angular stands by its commitment to ensuring the upgrade process is easier every time.</p>\n<p>In fact, we noticed recently that the Angular team was preparing for a new major release, v10. By keeping an eye on the number of RC releases, we could tell that v10 is just around the corner and knew we needed to start testing for support with our open source projects.</p>\n<p>Our open source UI library, Ionic Framework, depends heavily on Angular. And given that our ionic/ angular package is <a href=\"https://appfigures.com/top-sdks/development/all\">powering roughly 20%</a> of all the apps in both Google Play and the iOS App Stores, we think it’s pretty important for us to manage these updates in a safe and reliable way.</p>\n<p>With that in mind, we thought it would be fun to share some insight on how we prepare and manage Angular updates — at both the app level and library level — and in turn, make sure millions of users have a great upgrade experience. So let’s dive in.</p>\n<h3>Quick overview of Ionic</h3>\n<p>If you’re not familiar with <a href=\"http://ionicframework.com/\">Ionic</a>, we’re a mobile development kit for web developers. You write your apps using familiar web languages and your JavaScript framework of choice (Angular, of course), and we give you the tools to build and deploy those apps on mobile.</p>\n<p>Now, because Ionic Framework is a library, and not the native mobile app itself, updating Ionic Framework isn’t the same as updating an app that is built with Ionic. So keep that in mind as we go ahead.</p>\n<h3>Status report!</h3>\n<p>One of the first things we look for is to ensure that everything works between major versions. Angular has always been very consistent about making sure that major releases should just work for more people, and that includes us at Ionic. The very first thing we’ll do is read through the <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">changelog</a> and see if anything stands out. But sometimes the quick and easiest way to find out the state of things is to just test it out in real apps.</p>\n<p>So when we see a new RC of a major version is released, we’ll run it through our collection of testing apps. This includes features like the conference app, star track, as well as a few other internal apps. Most of the time everything works great!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*FGnBPjVwamissfnn\"></figure><p>There have been a few times, however, that we’ve noticed an issue in Ionic that probably existed beforehand but wasn’t obvious. This may sound like a disaster but it actually ends up being valuable for us because it means that by addressing it, we’re making Ionic even more stable, providing a better overall experience.</p>\n<p>Once we validate things at the app level, we then take it further and look at the library level.</p>\n<h3>Updating Ionic’s internals</h3>\n<p>For Ionic itself, we take a slightly different approach to managing upgrades. Since Ionic Framework’s release cycle is different from Angular, we end up supporting a few different major versions of Angular in our package.json. Given Angular’s commitment to stability, this works really well. Currently we support a range from 8.2 to the latest 9.x. Much of this success has to do with how we use Angular internally as well as Angular’s own stability.</p>\n<p>We also follow the best practices for libraries that are built for Angular. In doing so, we built @ionic/angular using <a href=\"https://github.com/ng-packagr/ng-packagr\">ng-packagr</a>, which manages all the work for a build process of an Angular library.</p>\n<p>While we support multiple previous versions of Angular in any given Ionic release, like all good things, they must come to an end and we do eventually make a hard cut and drop support for some past versions. We make this call by looking at what our community members are reporting for their Angular usage. This typically ends up being n-1, so whatever Angular’s latest stable release, plus one version behind.</p>\n<p>When we absolutely need a new feature/fix, we eventually make the call to build @ionic/angular against a newer version of Angular and adjust our peer dependencies.</p>\n<h3>Parting thoughts</h3>\n<p>Well here we are. We made it through another major release of Angular and as expected, we had an easy time updating Ionic for users. Hopefully this can help shed some light on why we build against certain versions of Angular, why starters sometimes have locked versions, and how we approach managing updates across a project. Given the number of apps out there that are built with Ionic and Angular, it’s important for us to get this right, or else we’ll have some upset users!</p>\n<p>So as we prepare for version 10.0, you can be sure that we will be going through this testing process and getting ready along with you.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=2cf5818b8389\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/leveraging-angular-prereleases-to-keep-ionic-in-sync-2cf5818b8389\">Leveraging Angular Prereleases to keep Ionic in Sync</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "angular",
      "semantic-versioning",
      "release-management",
      "ionic-framework",
      "ionic"
    ]
  },
  {
    "title": "The Angular Developer Survey",
    "pubDate": "2020-04-21 17:01:01",
    "link": "https://blog.angular.io/the-angular-developer-survey-334fb85f9b1?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/334fb85f9b1",
    "author": "Stephen Fluin",
    "thumbnail": "https://cdn-images-1.medium.com/max/250/0*VDStl74jtuu4-ank.png",
    "description": "\n<p>The 2020 Angular Developer Survey ends this week! If you haven’t already, please <a href=\"https://goo.gle/angular-survey-2020\">complete the survey now</a>. It takes only about a minute (82 seconds at the median 😃).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/0*VDStl74jtuu4-ank.png\"></figure><p>Complete the 2020 survey at: <a href=\"https://goo.gle/angular-survey-2020\">https://goo.gle/angular-survey-2020</a></p>\n<h3>About this Survey</h3>\n<p>We run two surveys: a short one that covers all of Angular, and an extended one that dives deep into specifics. The community response is always huge. We typically receive more than 25k responses for the short survey, and more than 5k for the extended survey.</p>\n<p>We listen to what developers care about and measure happiness. Developers love to share freely. Across all of the subprojects that we survey, we’ve collected lots of perspectives — with over 7k written responses.</p>\n<h3>Developer Priorities</h3>\n<p>Our main survey asks developers to rank various attributes, and we saw these priorities stay relatively stable between 2018 and 2019.</p>\n<p>Based on the rankings from 2018, we determined that Runtime Performance is most important overall based on weighted selections.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*8o5kV6GTOiHeNgenjVnYLQ.png\"><figcaption>As a weighted score in 2018, Runtime Performance was ranked most important overall</figcaption></figure><p>But this stat contrasts with 30.4% ranking Documentation as their #1 feature, but only 22.6% of developers ranking Runtime Performance as their #1.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*5Rl7e3bk41q7nytYWxnh6g.png\"><figcaption>In 2018, 30% of respondents said documentation was most important</figcaption></figure><p>In the 2019 survey, New Features slightly overtook Ease of Updates as most important by weighted ranking, but the other rankings stayed the same.</p>\n<h3>Feedback</h3>\n<p>We also review the free-form responses in depth. Looking across the entire data set, we can highlight several topics that Angular developers say are top of mind.</p>\n<ol>\n<li>Documentation</li>\n<li>Examples</li>\n<li>Components</li>\n<li>Support</li>\n<li>Features</li>\n<li>Easier</li>\n<li>Performance</li>\n</ol>\n<h3>More Insights</h3>\n<p>After we complete the 2020 survey, we’ll analyze the results and will share more about what we’ve learned — and the ways that we’ll respond to your needs.</p>\n<p>We’re starting on version 10, and planning for version 11. Now is a great chance to <a href=\"https://goo.gle/angular-survey-2020.\">speak up and be heard</a>!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=334fb85f9b1\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/the-angular-developer-survey-334fb85f9b1\">The Angular Developer Survey</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<p>The 2020 Angular Developer Survey ends this week! If you haven’t already, please <a href=\"https://goo.gle/angular-survey-2020\">complete the survey now</a>. It takes only about a minute (82 seconds at the median 😃).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/250/0*VDStl74jtuu4-ank.png\"></figure><p>Complete the 2020 survey at: <a href=\"https://goo.gle/angular-survey-2020\">https://goo.gle/angular-survey-2020</a></p>\n<h3>About this Survey</h3>\n<p>We run two surveys: a short one that covers all of Angular, and an extended one that dives deep into specifics. The community response is always huge. We typically receive more than 25k responses for the short survey, and more than 5k for the extended survey.</p>\n<p>We listen to what developers care about and measure happiness. Developers love to share freely. Across all of the subprojects that we survey, we’ve collected lots of perspectives — with over 7k written responses.</p>\n<h3>Developer Priorities</h3>\n<p>Our main survey asks developers to rank various attributes, and we saw these priorities stay relatively stable between 2018 and 2019.</p>\n<p>Based on the rankings from 2018, we determined that Runtime Performance is most important overall based on weighted selections.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*8o5kV6GTOiHeNgenjVnYLQ.png\"><figcaption>As a weighted score in 2018, Runtime Performance was ranked most important overall</figcaption></figure><p>But this stat contrasts with 30.4% ranking Documentation as their #1 feature, but only 22.6% of developers ranking Runtime Performance as their #1.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/600/1*5Rl7e3bk41q7nytYWxnh6g.png\"><figcaption>In 2018, 30% of respondents said documentation was most important</figcaption></figure><p>In the 2019 survey, New Features slightly overtook Ease of Updates as most important by weighted ranking, but the other rankings stayed the same.</p>\n<h3>Feedback</h3>\n<p>We also review the free-form responses in depth. Looking across the entire data set, we can highlight several topics that Angular developers say are top of mind.</p>\n<ol>\n<li>Documentation</li>\n<li>Examples</li>\n<li>Components</li>\n<li>Support</li>\n<li>Features</li>\n<li>Easier</li>\n<li>Performance</li>\n</ol>\n<h3>More Insights</h3>\n<p>After we complete the 2020 survey, we’ll analyze the results and will share more about what we’ve learned — and the ways that we’ll respond to your needs.</p>\n<p>We’re starting on version 10, and planning for version 11. Now is a great chance to <a href=\"https://goo.gle/angular-survey-2020.\">speak up and be heard</a>!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=334fb85f9b1\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/the-angular-developer-survey-334fb85f9b1\">The Angular Developer Survey</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "javascript",
      "web-development",
      "angular",
      "software-development",
      "surveys"
    ]
  },
  {
    "title": "Version 9.1 of Angular Now Available — TypeScript 3.8, faster builds, and more",
    "pubDate": "2020-03-26 00:38:59",
    "link": "https://blog.angular.io/version-9-1-of-angular-now-available-typescript-3-8-faster-builds-and-more-eb292f989428?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/eb292f989428",
    "author": "Stephen Fluin",
    "thumbnail": "https://cdn-images-1.medium.com/max/1000/0*8X-LhY0W2PMgPzsj",
    "description": "\n<h3>Version 9.1 of Angular Now Available — TypeScript 3.8, faster builds, and more</h3>\n<p>We just released Version 9.1 of Angular. This is <a href=\"https://semver.org/\">a minor release</a> of the framework and the CLI that is a drop-in replacement for <a href=\"https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3\">9.0</a> containing new features and bug fixes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*8X-LhY0W2PMgPzsj\"></figure><h3>Build Speed Improvements</h3>\n<p>Today, the Angular libraries you use are made compatible with the Ivy compiler via our ngcc tool. Previously, the ngcc compilation pass covered all of your Angular library dependencies sequentially. In 9.1, we’ve improved the speed of ngcc, and allowed it to compile multiple packages concurrently.</p>\n<p>These changes will help make builds faster and improve reliability for teams with monorepository-style workspace layouts.</p>\n<h3>TypeScript 3.8</h3>\n<p>We’ve added support for TypeScript 3.8, in addition to our existing support for 3.6 and 3.7.</p>\n<p>This release adds many great features to the TypeScript language, including:</p>\n<ul>\n<li>Type-Only Imports and Exports</li>\n<li>ECMAScript Private Fields</li>\n<li>Top level await</li>\n</ul>\n<p><a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/\">Read all about TypeScript 3.8</a>.</p>\n<h3>New CLI Component Generator Option displayBlock</h3>\n<p>Angular components are <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">displayed </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">inline</a> by default, as that’s the default for most DOM elements. It’s very common for developers to want components to use the display: block style. When you create a new component, you can now set this up automatically.</p>\n<pre>ng generate component my-component --displayBlock</pre>\n<p>To turn this on by default, set the schematics.@schematics/angular:component.displayBlock key in your angular.json to true, or use:</p>\n<pre>ng config schematics.@schematics/angular:component.displayBlock true</pre>\n<h3>End-to-End tests now support grep and invertGrep</h3>\n<p>When running end-to-end tests, <a href=\"https://github.com/angular/angular-cli/commit/d6c9693952b0bd0fae9f0128abe0ebf3863f603e\">we now pass</a> the grep and invertGrep options to the <a href=\"https://www.protractortest.org/\">Protractor</a> builder, allowing you to more easily choose the test you want to run.</p>\n<pre>ng e2e --grep searchTerm</pre>\n<h3>Improved HTML &amp; Expression Syntax Highlighting</h3>\n<p>If you use <a href=\"https://code.visualstudio.com/\">VSCode</a> and our <a href=\"https://marketplace.visualstudio.com/items?itemName=Angular.ng-template\">Language Service Extension</a>, starting today our extension will allow your IDE to syntax highlight <a href=\"https://angular.io/guide/template-syntax\">expressions in your templates</a>, using a TypeScript-like formatter. It will also add syntax highlighting to your inline HTML templates in your components.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*dYOVfi4jGVv9d8Ey\"></figure><p><em>Note: We worked with the authors of </em><em>angular2-inline and </em><em>vscode-angular-html on these features. If you use either of these extensions, you’ll need to disable them for this functionality to work.</em></p>\n<h3>Directionality Query API</h3>\n<p>If you build an application with Internationalization, you may be building a single app that supports <a href=\"https://en.wikipedia.org/wiki/Right-to-left\">Right to Left</a> locales. You can now query for the current direction at runtime.</p>\n<a href=\"https://medium.com/media/255ac5e5465540d13510eeee4313815d/href\">https://medium.com/media/255ac5e5465540d13510eeee4313815d/href</a><p>This was a community contribution, so a huge thank you to <a href=\"https://github.com/angular/angular/pull/33556\">Ephraim Khantsis</a>.</p>\n<h3>TSLint 6.1 by default</h3>\n<p>Newly created projects will now use <a href=\"https://github.com/palantir/tslint/releases\">TSLint 6.1</a> by default. If you want to migrate to the latest version, make sure you are on version 9.1 first, then you can opt-in via:</p>\n<pre>ng update @angular/cli --migrate-only tslint-version-6</pre>\n<p>We do not run this migration automatically because there are some minor breaking changes in TSLint 6.1.</p>\n<h3>Other Changes</h3>\n<p>This release includes lots of other bug fixes, performance improvements, and minor features. Version 9.1 also improves the compatibility story with our new compiler and runtime. If you previously attempted to enable Ivy with version 9.0 and ran into issues, try again with version 9.1.</p>\n<p>See the full list of recent changes in our <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">framework changelog</a>, <a href=\"https://github.com/angular/angular-cli/releases/tag/v9.1.0\">CLI changelog</a>, and <a href=\"https://github.com/angular/components/releases/tag/9.2.0\">components changelog</a>.</p>\n<h3>How to Update</h3>\n<p>Update to the latest version of Angular to get access to these new capabilities and bug fixes.</p>\n<pre>ng update @angular/cli @angular/core</pre>\n<h3>What’s Next?</h3>\n<p>This is the last planned minor release for 9.x. As we start work towards 10.0, you should expect to see 10.0 prereleases usually once per week, even though they will contain only minimal changes at first.</p>\n<p><em>Thank you to Kara Erickson, Dave Shevitz, Igor Minar, Keen Liau, Charles Lyding, and Alan Agiusfor their work on this post.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=eb292f989428\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/version-9-1-of-angular-now-available-typescript-3-8-faster-builds-and-more-eb292f989428\">Version 9.1 of Angular Now Available — TypeScript 3.8, faster builds, and more</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<h3>Version 9.1 of Angular Now Available — TypeScript 3.8, faster builds, and more</h3>\n<p>We just released Version 9.1 of Angular. This is <a href=\"https://semver.org/\">a minor release</a> of the framework and the CLI that is a drop-in replacement for <a href=\"https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3\">9.0</a> containing new features and bug fixes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*8X-LhY0W2PMgPzsj\"></figure><h3>Build Speed Improvements</h3>\n<p>Today, the Angular libraries you use are made compatible with the Ivy compiler via our ngcc tool. Previously, the ngcc compilation pass covered all of your Angular library dependencies sequentially. In 9.1, we’ve improved the speed of ngcc, and allowed it to compile multiple packages concurrently.</p>\n<p>These changes will help make builds faster and improve reliability for teams with monorepository-style workspace layouts.</p>\n<h3>TypeScript 3.8</h3>\n<p>We’ve added support for TypeScript 3.8, in addition to our existing support for 3.6 and 3.7.</p>\n<p>This release adds many great features to the TypeScript language, including:</p>\n<ul>\n<li>Type-Only Imports and Exports</li>\n<li>ECMAScript Private Fields</li>\n<li>Top level await</li>\n</ul>\n<p><a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-8/\">Read all about TypeScript 3.8</a>.</p>\n<h3>New CLI Component Generator Option displayBlock</h3>\n<p>Angular components are <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">displayed </a><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">inline</a> by default, as that’s the default for most DOM elements. It’s very common for developers to want components to use the display: block style. When you create a new component, you can now set this up automatically.</p>\n<pre>ng generate component my-component --displayBlock</pre>\n<p>To turn this on by default, set the schematics.@schematics/angular:component.displayBlock key in your angular.json to true, or use:</p>\n<pre>ng config schematics.@schematics/angular:component.displayBlock true</pre>\n<h3>End-to-End tests now support grep and invertGrep</h3>\n<p>When running end-to-end tests, <a href=\"https://github.com/angular/angular-cli/commit/d6c9693952b0bd0fae9f0128abe0ebf3863f603e\">we now pass</a> the grep and invertGrep options to the <a href=\"https://www.protractortest.org/\">Protractor</a> builder, allowing you to more easily choose the test you want to run.</p>\n<pre>ng e2e --grep searchTerm</pre>\n<h3>Improved HTML &amp; Expression Syntax Highlighting</h3>\n<p>If you use <a href=\"https://code.visualstudio.com/\">VSCode</a> and our <a href=\"https://marketplace.visualstudio.com/items?itemName=Angular.ng-template\">Language Service Extension</a>, starting today our extension will allow your IDE to syntax highlight <a href=\"https://angular.io/guide/template-syntax\">expressions in your templates</a>, using a TypeScript-like formatter. It will also add syntax highlighting to your inline HTML templates in your components.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1000/0*dYOVfi4jGVv9d8Ey\"></figure><p><em>Note: We worked with the authors of </em><em>angular2-inline and </em><em>vscode-angular-html on these features. If you use either of these extensions, you’ll need to disable them for this functionality to work.</em></p>\n<h3>Directionality Query API</h3>\n<p>If you build an application with Internationalization, you may be building a single app that supports <a href=\"https://en.wikipedia.org/wiki/Right-to-left\">Right to Left</a> locales. You can now query for the current direction at runtime.</p>\n<a href=\"https://medium.com/media/255ac5e5465540d13510eeee4313815d/href\">https://medium.com/media/255ac5e5465540d13510eeee4313815d/href</a><p>This was a community contribution, so a huge thank you to <a href=\"https://github.com/angular/angular/pull/33556\">Ephraim Khantsis</a>.</p>\n<h3>TSLint 6.1 by default</h3>\n<p>Newly created projects will now use <a href=\"https://github.com/palantir/tslint/releases\">TSLint 6.1</a> by default. If you want to migrate to the latest version, make sure you are on version 9.1 first, then you can opt-in via:</p>\n<pre>ng update @angular/cli --migrate-only tslint-version-6</pre>\n<p>We do not run this migration automatically because there are some minor breaking changes in TSLint 6.1.</p>\n<h3>Other Changes</h3>\n<p>This release includes lots of other bug fixes, performance improvements, and minor features. Version 9.1 also improves the compatibility story with our new compiler and runtime. If you previously attempted to enable Ivy with version 9.0 and ran into issues, try again with version 9.1.</p>\n<p>See the full list of recent changes in our <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">framework changelog</a>, <a href=\"https://github.com/angular/angular-cli/releases/tag/v9.1.0\">CLI changelog</a>, and <a href=\"https://github.com/angular/components/releases/tag/9.2.0\">components changelog</a>.</p>\n<h3>How to Update</h3>\n<p>Update to the latest version of Angular to get access to these new capabilities and bug fixes.</p>\n<pre>ng update @angular/cli @angular/core</pre>\n<h3>What’s Next?</h3>\n<p>This is the last planned minor release for 9.x. As we start work towards 10.0, you should expect to see 10.0 prereleases usually once per week, even though they will contain only minimal changes at first.</p>\n<p><em>Thank you to Kara Erickson, Dave Shevitz, Igor Minar, Keen Liau, Charles Lyding, and Alan Agiusfor their work on this post.</em></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=eb292f989428\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/version-9-1-of-angular-now-available-typescript-3-8-faster-builds-and-more-eb292f989428\">Version 9.1 of Angular Now Available — TypeScript 3.8, faster builds, and more</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "javascript",
      "release-notes",
      "software-development",
      "web-development",
      "angular"
    ]
  },
  {
    "title": "Version 9 of Angular Now Available— Project Ivy has arrived!",
    "pubDate": "2020-02-06 20:32:59",
    "link": "https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/23c97b63cfa3",
    "author": "Stephen Fluin",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*4tkqVWVOl0dGjbO9",
    "description": "\n<h3>Version 9 of Angular Now Available — Project Ivy has arrived!</h3>\n<p>The 9.0.0 release of Angular is here! This is a major release that spans the entire platform, including the framework, Angular Material, and the CLI. This release switches applications to the <a href=\"https://angular.io/guide/ivy\">Ivy</a> compiler and runtime by default, and introduces improved ways of testing components.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4tkqVWVOl0dGjbO9\"></figure><p>This is one of the biggest updates to Angular we’ve made in the past 3 years, and we’re excited for all of the ways it empowers developers to build better applications and contribute to the Angular ecosystem.</p>\n<h3>How to update to version 9</h3>\n<p>Visit <a href=\"https://update.angular.io/\">update.angular.io</a> for detailed information and guidance. To have the best update experience, we recommend you first update to the final release of Angular 8.</p>\n<p>First, update to the latest version of 8</p>\n<pre>ng update @angular/cli@8 @angular/core@8</pre>\n<p>Then, update to 9</p>\n<pre>ng update @angular/cli @angular/core</pre>\n<p>To review the key changes with this update, including deprecated APIs, see <a href=\"https://v9.angular.io/guide/updating-to-version-9\">Updating to Angular version 9</a> in the Angular documentation.</p>\n<h3>Ivy</h3>\n<p>Version 9 moves all applications to use the <a href=\"https://v9.angular.io/guide/ivy\">Ivy compiler and runtime</a> by default. In addition to hundreds of bug fixes, the Ivy compiler and runtime offers numerous advantages:</p>\n<ul>\n<li>Smaller bundle sizes</li>\n<li>Faster testing</li>\n<li>Better debugging</li>\n<li>Improved CSS class and style binding</li>\n<li>Improved type checking</li>\n<li>Improved build errors</li>\n<li>Improved build times, enabling AOT on by default</li>\n<li>Improved Internationalization</li>\n</ul>\n<p>Here’s a breakdown of some of the more notable improvements.</p>\n<h3>Smaller bundle sizes</h3>\n<p>The Ivy compiler has been designed to remove parts of Angular that aren’t being used via <a href=\"https://webpack.js.org/guides/tree-shaking/\">tree-shaking</a> and to generate less code for each Angular component.</p>\n<p>With these improvements, small apps and large apps can see the most dramatic size savings.</p>\n<ul>\n<li>Small apps that don’t use many Angular features can benefit most from tree-shaking.</li>\n<li>Large apps with many components can benefit most from the reduced factory size.</li>\n<li>Medium-sized apps should see bundle sizes that are on par or slightly smaller, since they benefit less from tree-shaking and don’t have enough components to truly leverage smaller factories.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*7dSxEASiMazbMt7N\"><figcaption>Small apps could see around a 30% decrease in bundle size, large apps will see a 25–40% decrease, and medium apps decrease minimally.</figcaption></figure><h3>Faster testing</h3>\n<p>We have also revamped the implementation of <a href=\"https://angular.io/api/core/testing/TestBed\">TestBed</a> in Ivy to make it more efficient.</p>\n<p>Previously, TestBed would recompile all components between the running of each test, regardless of whether there were any changes made to components (for example, through overrides).</p>\n<p>In Ivy, TestBed doesn’t recompile components between tests unless a component has been manually overridden, which allows it to avoid recompilation between the grand majority of tests.</p>\n<p>With this change, the framework’s core acceptance tests are about 40% faster. We would expect users to see their own application test speeds to be around 40–50% faster.</p>\n<h3>Better debugging</h3>\n<p>Ivy provides you with more tools to debug your applications. When running an application in Dev Mode with the Ivy runtime, we now offer the new <a href=\"https://v9.angular.io/api/core/global\">ng object for debugging</a>.</p>\n<ul>\n<li>You can ask Angular for access to instances of your components, directives, and more</li>\n<li>You can manually call methods and update state</li>\n<li>When you want to see the results of change detection, you can trigger change detection with applyChanges</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/582/0*RB_jqf6GCX-Ewq5V\"></figure><p>Ivy also improves the stack trace for debugging issues such as the ExpressionChangedAfterItHasBeenCheckedError. Previously the stack trace could be unhelpful:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*I4qPrPIXJi2yUj99\"></figure><p>With Ivy, you see a more useful stack trace that allows you to jump directly to the template instruction with the expression that has changed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*QPhLwDCufQOOhRVo\"></figure><p>For example, if you click on AppComponent_Template in the stack trace above, you can see the specific line in the generated code where the error is being thrown:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*69sx5aAdQyJoGbqv\"></figure><p>If you’re so inclined, you can also step into any of these framework instructions to walk through how the framework creates or updates your components.</p>\n<h3>Improved CSS class and style binding</h3>\n<p>The Ivy compiler and runtime provides improvements for handling styles. Previously, if an application contained competing definitions for a style, those styles would destructively replace each other. With Ivy, the styles are merged in a predictable way.</p>\n<p>Consider the following template and component snippets:</p>\n<a href=\"https://medium.com/media/eebd878c8eeb1f4a66e4b5048a2a1a70/href\">https://medium.com/media/eebd878c8eeb1f4a66e4b5048a2a1a70/href</a><a href=\"https://medium.com/media/5e3da6a82d530d7d665f8d76d6a6452b/href\">https://medium.com/media/5e3da6a82d530d7d665f8d76d6a6452b/href</a><p>Previously, whichever binding was evaluated last would win, and this could depend on the timing of changes to these expressions. If myColor and myOtherColor both were undefined, the static ‘red’ style would be ignored.</p>\n<p>With version 9, you can manage your styles through a clear, consistent order of precedence that isn’t dependent on timing. The most specific styles always have the highest precedence. For example, a binding to [style.color] overrides a conflicting binding to [style].</p>\n<p>However, for backwards compatibility reasons, we have left [ngStyle] and [ngClass] bindings behavior the same as before. When their binding values are updated, the new values will override any competing bindings.</p>\n<p>You can read more about styling precedence rules in the <a href=\"https://v9.angular.io/guide/template-syntax#styling-precedence\">Template Syntax guide</a> in the documentation.</p>\n<p>As a side effect of the styling refactoring, you can now also bind to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">CSS custom properties</a> (also known as CSS variables).</p>\n<a href=\"https://medium.com/media/66b492e125b315183ace725b5de7e2c6/href\">https://medium.com/media/66b492e125b315183ace725b5de7e2c6/href</a><h3>Improved type checking</h3>\n<p>The Angular compiler can check more of the types of your application, and it can apply more strict rules. These features will help you and your team catch bugs earlier in the development process.</p>\n<p>We support two main flags for additional type checks in addition to the default:</p>\n<ul>\n<li>fullTemplateTypeCheck — Activating this flag tells the compiler to check everything within your template (ngIf, ngFor, ng-template, etc)</li>\n<li>strictTemplates — Activating this flag will apply the strictest Type System rules for type checking.</li>\n</ul>\n<p>To learn more about template type checking options, see the <a href=\"https://v9.angular.io/guide/template-typecheck\">Template type checking guide</a> in the documentation.</p>\n<h3>Improved build errors</h3>\n<p>The new Ivy compiler is not only faster and offers stronger type safety, it also makes all of the error messages easier to read.</p>\n<p>In version 8 or View Engine, a typical compiler error would look like the following:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9MynS6_WDBlGkYqN\"></figure><p>In version 9 with Ivy, the same error looks like:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Ag3LaCG6UVxNppq4\"></figure><h3>Improved build times, enabling Ahead-of-Time compiler by default</h3>\n<p>Thanks to Ivy’s new architecture, we’ve made significant improvements to the compiler’s performance.</p>\n<p>We measure our compiler’s performance in terms of the <em>overhead</em> on top of a plain TypeScript compilation of an application. For our documentation app (angular.io), this overhead decreased from 0.8x to 0.5x with Ivy, an improvement of nearly 40%.</p>\n<p>These improvements mean that <a href=\"https://angular.io/guide/aot-compiler\">AOT builds</a> can be noticeably faster. Thanks to this speedup, for the first time ever we’re using AOT even for dev-mode builds. This means that `ng serve` now benefits from the same compile-time checking as production builds, significantly improving the developer experience for Angular.</p>\n<p>Thanks to the changes in the compiler and runtime, we also no longer require <a href=\"https://v9.angular.io/guide/deprecations#entryComponents\">entryComponents</a>. These components will be discovered and compiled automatically by their usage.</p>\n<h3>Improved internationalization (i18n)</h3>\n<p>Internationalization has been a core feature of Angular, where you could build your application once per locale and receive highly optimized and localized applications. In 9.0, we’re making this faster by moving the build-time i18n substitutions later in the build process. This change allowed us to make it up to 10 times faster.</p>\n<p><a href=\"https://v9.angular.io/guide/i18n\">Read more</a> about the new i18n: @angular/localize and the new angular.json configuration.</p>\n<h3>Other improvements with version 9</h3>\n<p>The team has also been hard at work continuing to improve the full experience of using Angular.</p>\n<h3>More reliable ng update</h3>\n<p>We’ve made some changes to how ng update works to make it more reliable and informative.</p>\n<ul>\n<li>\n<strong>Always use the latest CLI.</strong> Starting with 8.3.19 of the CLI, we now use the CLI from the destination version during updates. This means that going forward, updates will take advantage of newer update features automatically.</li>\n<li>\n<strong>Clearer progress updates.</strong> ng update now does more to tell you what is going on under the hood. For each migration, you’ll see information about the migration.</li>\n<li>\n<strong>Easier update debugging.</strong> By default, ng update runs all of the migrations and leaves the aggregate changes on disk for you to inspect. The version 9 update also introduces the new <strong>--create-commits</strong> flag. When you run ng update --create-commits, the tool commits the state of your codebase after each migration, so you can step through and understand or debug the changes we are making to your code.</li>\n</ul>\n<h3>New options for '<em>providedIn'</em>\n</h3>\n<p>When you create an @Injectable service in Angular, you must choose where it should be added to the injector. In addition to the previous root and module options, you have two additional options.</p>\n<ul>\n<li>platform— Specifying providedIn: 'platform' makes the service available in a special singleton platform injector that is shared by all applications on the page.</li>\n<li>any— Provides a unique instance in every module (including lazy modules) that injects the token.</li>\n</ul>\n<p><a href=\"https://v9.angular.io/api/core/Injectable\">Learn more about providedIn</a> in our API documentation.</p>\n<h3>Component harnesses</h3>\n<p>Testing components has historically relied on using implementation details such as CSS selectors to find components and to trigger events. This meant that whenever a component library changed its implementation, all of the tests relying on those components would need to be updated.</p>\n<p>In version 9, we are introducing <em>component harnesses</em>, which offer an alternative way to test components. By abstracting away the implementation details, you can make sure your unit tests are correctly scoped and less brittle.</p>\n<p>Most of Angular Material’s components can now be tested via harnesses, and we are making harnesses available to any component author as part of the <a href=\"https://material.angular.io/cdk/categories\">Component Dev Kit</a> (CDK).</p>\n<p>Here’s an example test before harnesses:</p>\n<a href=\"https://medium.com/media/ecba92926e72f27a8848131c34f1f142/href\">https://medium.com/media/ecba92926e72f27a8848131c34f1f142/href</a><p>And the same test with harnesses:</p>\n<a href=\"https://medium.com/media/eaaaaa0a220d9ae0e5e7ad4a410030ba/href\">https://medium.com/media/eaaaaa0a220d9ae0e5e7ad4a410030ba/href</a><p>Learn more about <a href=\"https://v9.material.angular.io/guide/using-component-harnesses\">Material’s component harnesses</a> or <a href=\"https://material.angular.io/cdk/test-harnesses/overview\">building your own</a> with the CDK.</p>\n<h3>New components</h3>\n<p>You can now include capabilities from YouTube and Google Maps in your applications.</p>\n<ul>\n<li>You can render a YouTube Player inline within your application with the new<a href=\"https://github.com/angular/components/tree/master/src/youtube-player\"> youtube-player</a>. After you load the YouTube IFrame player API, this component will take advantage of it.</li>\n<li>We are also introducing <a href=\"https://github.com/angular/components/tree/master/src/google-maps\">google-maps</a> components. These components make it easy to render Google Maps, display markers, and wire up interactivity in a way that works like a normal Angular component, saving you from needing to learn the full <a href=\"https://developers.google.com/maps/documentation/javascript/tutorial\">Google Maps API</a>.</li>\n</ul>\n<h3>IDE &amp; language service improvements</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*EFcVVFKZKOshNNpJd9ot6g.gif\"><figcaption>Go to definition and improved Language Service demo</figcaption></figure><p>Significant improvements have been made to the Angular language service <a href=\"https://marketplace.visualstudio.com/items?itemName=Angular.ng-template\">extension</a> on the Visual Studio Marketplace. Along with major architectural overhaul to address performance and stability issues, many long-standing bugs have also been fixed. Besides that, some new features include:</p>\n<ul>\n<li>TextMate grammar for Angular Template Syntax, which now enables syntax highlighting in both inline and external templates</li>\n<li>“Go to definition” for templateUrl and styleUrls</li>\n<li>NgModule and type information in hover tooltip</li>\n</ul>\n<h3>TypeScript 3.7 support</h3>\n<p>Angular has been updated to work with TypeScript 3.6 and 3.7, including the extremely popular <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">optional chaining</a> feature in TypeScript 3.7. To stay in sync with the ecosystem, we’ve also updated our version of other ecosystem dependencies such as Zone.JS and RxJS.</p>\n<h3>Thank you to the community</h3>\n<p>This release is the culmination of over 2 years of work. We’re really excited about the future and possibilities that this work opens up. This wouldn’t be possible without the work of hundreds of people in the community.</p>\n<p>v9 Contributors:</p>\n<p>Aaron Frost, Adam J. Penn, Adam Plumer, Adam Vigneaux, Adrien Crivelli, Ajit Singh, Alain Chautard, Alan Agius, Alexander Ivanov, Alexander von Weiss, Alex Eagle, Alex Rickabaugh, alexzuza, Ali Mirlou, Alison Gale, Alyssa Nicoll, Amadou Sall, AMarinov, Amit Dubey, Anders Kjær Damgaard, Andrew Kushnir, Andrew Scott, Andrew Seguin, Andrius, Andrus Diaz, Ankit Prajapati, Aravind, Aristeidis Bampakos, Arne Hoek, Artur Androsovych, arturovt, Atef Ben Ali, Ayaz Hafiz, Ben Elliott, Benjamin Liii, Brian Michalski, CaerusKaru, Carlos Ortiz García, Cédric Exbrayat, Charles Lyding, Christian Liebel, Christopher Dahm, codingnuclei, Colum Ferry, Craig Spence, cran-cg, crisbeto, Cyrille Tuzi, Daniele Morosinotto, Daniel Waxweiler, Danny Skoog, David Sánchez, David Shevitz, Denis Omelkov, Denys Vuika, Diego Juliao, dishanfernando, Dmitri Ischenko, Dominik Pieper, Do Nhu Vy, Doug Parker, Dyma, EddyP23, Edy Segura, Eliran Eliassy, Elvis Begovic, Emmanuel DEMEY, Ephraim, Erik Pintar, Esteban Gehring, Eusen, Evan Martin, FabianGosebrink, FaustmannChr, FDIM, Ferdinand Malcher, FG-33, Filipe Silva, Gabor Szekely, Gabriel Medeiros Coelho, GavinMK, Geoff Bass, George Kalpakas, Gérôme Grignon, ghiscoding, Girma Nigusse, Greg Magolan, Grigoriy Beziuk, hafiz, Harinder Singh, Hayouung, Hoel IRIS, horn, idzark, Igor Minar, Issei Horie, ivanwonder, Jakub Pawlot, James Vickery, Jan Malchert, Jason Bedard, Jeff Held, Jennifer Fell, Jeremy Elbourn, JiaLiPassion, Jithil P Ponnan, jnavb, Joakim Zebic, Joey Perrott, john li, John Ralph Umandal, Jonathan Sharpe, Joost Koehoorn, Jordan Amman, Jordan Nelson, Joshua Colvin, Judy Bogart, J Z, Kai Röder, Kapunahele Wong, Kara Erickson, katryo, Kayla Altepeter, Keen Yee Liau, ketangote, Kirk Larkin, Koala, Kristina Gocheva, kristinavavrova, Kristiyan Kostadinov, Kwinten Pisman, Kyle J. Kemp, Lars Gyrup Brink Nielsen, LASLEDJ, lazarljubenovic, Leonardo Zizzamia, Leon Radley, Luka Petrovic, Mansour Fall, manzonif, Mark Goho, Martina Kraus, Martin Probst, Matias Niemelä, Matthew Harris, Matt Janssen, Mayur Barge, mbehrlich, mertdeg2, Michael Maier, Michael Nahkies, Michael Prentice, Michał Koziara, Mike Brocchi, Mike Casebolt, mikef, Miles Malerba, Minko Gechev, Mirco Widmer, Misko Hevery, Miško Hevery, Mitchell Skaggs, mohax, Muhammad Umair, Muhammad Umair Khan, Nathan Tate, Németh Tamás, Nicolas Villanueva, Nikita Potapenko, Niklas Merz, noeri, Noopur, NothingEverHappens, ODAVING, Olegas Goncarovas, Olivier Combe, Orlando Pozo, owenmecham, Pascal Fivian, paulceli, Paul Gschwendtner, Pawel Kozlowski, Pete Bacon Darwin, Phaneendra, philonor, Pierre-Yves FARE, Piotr Błażejewicz, Potapy4, Rado Kirov, Ralf D. Müller, Raz Luvaton, Reuben Wilson, Richard Lea, Rick Katka, Robert Coie, Robin Dupret, Roy, Rudar Daman Singla, Rustam, Sachin, Sahan Serasinghe, Sam Julien, Santosh Yadav, Sasha Rudan, Sergey Koshechkin, Sergey Nikitin, Shibasish, Sholka Jadav, Showtim3, ShubhrankR, Simon Jespersen, Simon Kurtz, skrikl, Smartin, Sonu Kapoor, Srichandradeep Choudarapu, Sriram Jayarman, Stefanie Fluin, Stephen Cooper, Stephen Fluin, Suguru Inatomi, Suresh918, Syu Kato, thanhpd, thekiba, TheMushr00m, Tiep Phan, Timar, Tim Deschryver, TinyMan, Tom Kwong, Tom Sullivan, Trevor Karjanis, Troels Lenda, Turtuvshin Byambaa, Vanessa Schmitt, Victor, Vikash Dahiya, Vikram Subramanian, Wagner Maciel, Wataru Kasahara, Wenqi, why520crazy, willbeaufoy, William Lohan, WreckItRalph, Yann Bertrand, Younes Jaaidi, Yulia Tsareva, Zaid Al-Omari, zuckjet, 陈旭.</p>\n<p>We would also like to thank our GDEs and the community at large. The feedback, issue reports, and reproductions we receive are essential to holding our work to the highest quality standards. There are already over 4000 public Angular apps using version 9.</p>\n<p>Special thanks to our long term enterprise collaborator <a href=\"https://github.com/pkozlowski-opensource\">Pawel Kozlowski</a> and his sponsor <a href=\"https://amadeus.com/\">Amadeus</a>. Pawel made a huge quantity of contributions with exceptional quality over the 2 years of the Ivy project that have been a critical part of the project’s success.</p>\n<p>If you have feedback on this release, please <a href=\"https://github.com/angular/angular/issues/new/choose\">file an issue</a>, or <a href=\"https://twitter.com/angular\">let us know</a>!</p>\n<p>I personally want to thank Igor and Kara, as huge sections of this blog post were written by them.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=23c97b63cfa3\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3\">Version 9 of Angular Now Available— Project Ivy has arrived!</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<h3>Version 9 of Angular Now Available — Project Ivy has arrived!</h3>\n<p>The 9.0.0 release of Angular is here! This is a major release that spans the entire platform, including the framework, Angular Material, and the CLI. This release switches applications to the <a href=\"https://angular.io/guide/ivy\">Ivy</a> compiler and runtime by default, and introduces improved ways of testing components.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4tkqVWVOl0dGjbO9\"></figure><p>This is one of the biggest updates to Angular we’ve made in the past 3 years, and we’re excited for all of the ways it empowers developers to build better applications and contribute to the Angular ecosystem.</p>\n<h3>How to update to version 9</h3>\n<p>Visit <a href=\"https://update.angular.io/\">update.angular.io</a> for detailed information and guidance. To have the best update experience, we recommend you first update to the final release of Angular 8.</p>\n<p>First, update to the latest version of 8</p>\n<pre>ng update @angular/cli@8 @angular/core@8</pre>\n<p>Then, update to 9</p>\n<pre>ng update @angular/cli @angular/core</pre>\n<p>To review the key changes with this update, including deprecated APIs, see <a href=\"https://v9.angular.io/guide/updating-to-version-9\">Updating to Angular version 9</a> in the Angular documentation.</p>\n<h3>Ivy</h3>\n<p>Version 9 moves all applications to use the <a href=\"https://v9.angular.io/guide/ivy\">Ivy compiler and runtime</a> by default. In addition to hundreds of bug fixes, the Ivy compiler and runtime offers numerous advantages:</p>\n<ul>\n<li>Smaller bundle sizes</li>\n<li>Faster testing</li>\n<li>Better debugging</li>\n<li>Improved CSS class and style binding</li>\n<li>Improved type checking</li>\n<li>Improved build errors</li>\n<li>Improved build times, enabling AOT on by default</li>\n<li>Improved Internationalization</li>\n</ul>\n<p>Here’s a breakdown of some of the more notable improvements.</p>\n<h3>Smaller bundle sizes</h3>\n<p>The Ivy compiler has been designed to remove parts of Angular that aren’t being used via <a href=\"https://webpack.js.org/guides/tree-shaking/\">tree-shaking</a> and to generate less code for each Angular component.</p>\n<p>With these improvements, small apps and large apps can see the most dramatic size savings.</p>\n<ul>\n<li>Small apps that don’t use many Angular features can benefit most from tree-shaking.</li>\n<li>Large apps with many components can benefit most from the reduced factory size.</li>\n<li>Medium-sized apps should see bundle sizes that are on par or slightly smaller, since they benefit less from tree-shaking and don’t have enough components to truly leverage smaller factories.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*7dSxEASiMazbMt7N\"><figcaption>Small apps could see around a 30% decrease in bundle size, large apps will see a 25–40% decrease, and medium apps decrease minimally.</figcaption></figure><h3>Faster testing</h3>\n<p>We have also revamped the implementation of <a href=\"https://angular.io/api/core/testing/TestBed\">TestBed</a> in Ivy to make it more efficient.</p>\n<p>Previously, TestBed would recompile all components between the running of each test, regardless of whether there were any changes made to components (for example, through overrides).</p>\n<p>In Ivy, TestBed doesn’t recompile components between tests unless a component has been manually overridden, which allows it to avoid recompilation between the grand majority of tests.</p>\n<p>With this change, the framework’s core acceptance tests are about 40% faster. We would expect users to see their own application test speeds to be around 40–50% faster.</p>\n<h3>Better debugging</h3>\n<p>Ivy provides you with more tools to debug your applications. When running an application in Dev Mode with the Ivy runtime, we now offer the new <a href=\"https://v9.angular.io/api/core/global\">ng object for debugging</a>.</p>\n<ul>\n<li>You can ask Angular for access to instances of your components, directives, and more</li>\n<li>You can manually call methods and update state</li>\n<li>When you want to see the results of change detection, you can trigger change detection with applyChanges</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/582/0*RB_jqf6GCX-Ewq5V\"></figure><p>Ivy also improves the stack trace for debugging issues such as the ExpressionChangedAfterItHasBeenCheckedError. Previously the stack trace could be unhelpful:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*I4qPrPIXJi2yUj99\"></figure><p>With Ivy, you see a more useful stack trace that allows you to jump directly to the template instruction with the expression that has changed.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*QPhLwDCufQOOhRVo\"></figure><p>For example, if you click on AppComponent_Template in the stack trace above, you can see the specific line in the generated code where the error is being thrown:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*69sx5aAdQyJoGbqv\"></figure><p>If you’re so inclined, you can also step into any of these framework instructions to walk through how the framework creates or updates your components.</p>\n<h3>Improved CSS class and style binding</h3>\n<p>The Ivy compiler and runtime provides improvements for handling styles. Previously, if an application contained competing definitions for a style, those styles would destructively replace each other. With Ivy, the styles are merged in a predictable way.</p>\n<p>Consider the following template and component snippets:</p>\n<a href=\"https://medium.com/media/eebd878c8eeb1f4a66e4b5048a2a1a70/href\">https://medium.com/media/eebd878c8eeb1f4a66e4b5048a2a1a70/href</a><a href=\"https://medium.com/media/5e3da6a82d530d7d665f8d76d6a6452b/href\">https://medium.com/media/5e3da6a82d530d7d665f8d76d6a6452b/href</a><p>Previously, whichever binding was evaluated last would win, and this could depend on the timing of changes to these expressions. If myColor and myOtherColor both were undefined, the static ‘red’ style would be ignored.</p>\n<p>With version 9, you can manage your styles through a clear, consistent order of precedence that isn’t dependent on timing. The most specific styles always have the highest precedence. For example, a binding to [style.color] overrides a conflicting binding to [style].</p>\n<p>However, for backwards compatibility reasons, we have left [ngStyle] and [ngClass] bindings behavior the same as before. When their binding values are updated, the new values will override any competing bindings.</p>\n<p>You can read more about styling precedence rules in the <a href=\"https://v9.angular.io/guide/template-syntax#styling-precedence\">Template Syntax guide</a> in the documentation.</p>\n<p>As a side effect of the styling refactoring, you can now also bind to <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">CSS custom properties</a> (also known as CSS variables).</p>\n<a href=\"https://medium.com/media/66b492e125b315183ace725b5de7e2c6/href\">https://medium.com/media/66b492e125b315183ace725b5de7e2c6/href</a><h3>Improved type checking</h3>\n<p>The Angular compiler can check more of the types of your application, and it can apply more strict rules. These features will help you and your team catch bugs earlier in the development process.</p>\n<p>We support two main flags for additional type checks in addition to the default:</p>\n<ul>\n<li>fullTemplateTypeCheck — Activating this flag tells the compiler to check everything within your template (ngIf, ngFor, ng-template, etc)</li>\n<li>strictTemplates — Activating this flag will apply the strictest Type System rules for type checking.</li>\n</ul>\n<p>To learn more about template type checking options, see the <a href=\"https://v9.angular.io/guide/template-typecheck\">Template type checking guide</a> in the documentation.</p>\n<h3>Improved build errors</h3>\n<p>The new Ivy compiler is not only faster and offers stronger type safety, it also makes all of the error messages easier to read.</p>\n<p>In version 8 or View Engine, a typical compiler error would look like the following:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*9MynS6_WDBlGkYqN\"></figure><p>In version 9 with Ivy, the same error looks like:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Ag3LaCG6UVxNppq4\"></figure><h3>Improved build times, enabling Ahead-of-Time compiler by default</h3>\n<p>Thanks to Ivy’s new architecture, we’ve made significant improvements to the compiler’s performance.</p>\n<p>We measure our compiler’s performance in terms of the <em>overhead</em> on top of a plain TypeScript compilation of an application. For our documentation app (angular.io), this overhead decreased from 0.8x to 0.5x with Ivy, an improvement of nearly 40%.</p>\n<p>These improvements mean that <a href=\"https://angular.io/guide/aot-compiler\">AOT builds</a> can be noticeably faster. Thanks to this speedup, for the first time ever we’re using AOT even for dev-mode builds. This means that `ng serve` now benefits from the same compile-time checking as production builds, significantly improving the developer experience for Angular.</p>\n<p>Thanks to the changes in the compiler and runtime, we also no longer require <a href=\"https://v9.angular.io/guide/deprecations#entryComponents\">entryComponents</a>. These components will be discovered and compiled automatically by their usage.</p>\n<h3>Improved internationalization (i18n)</h3>\n<p>Internationalization has been a core feature of Angular, where you could build your application once per locale and receive highly optimized and localized applications. In 9.0, we’re making this faster by moving the build-time i18n substitutions later in the build process. This change allowed us to make it up to 10 times faster.</p>\n<p><a href=\"https://v9.angular.io/guide/i18n\">Read more</a> about the new i18n: @angular/localize and the new angular.json configuration.</p>\n<h3>Other improvements with version 9</h3>\n<p>The team has also been hard at work continuing to improve the full experience of using Angular.</p>\n<h3>More reliable ng update</h3>\n<p>We’ve made some changes to how ng update works to make it more reliable and informative.</p>\n<ul>\n<li>\n<strong>Always use the latest CLI.</strong> Starting with 8.3.19 of the CLI, we now use the CLI from the destination version during updates. This means that going forward, updates will take advantage of newer update features automatically.</li>\n<li>\n<strong>Clearer progress updates.</strong> ng update now does more to tell you what is going on under the hood. For each migration, you’ll see information about the migration.</li>\n<li>\n<strong>Easier update debugging.</strong> By default, ng update runs all of the migrations and leaves the aggregate changes on disk for you to inspect. The version 9 update also introduces the new <strong>--create-commits</strong> flag. When you run ng update --create-commits, the tool commits the state of your codebase after each migration, so you can step through and understand or debug the changes we are making to your code.</li>\n</ul>\n<h3>New options for '<em>providedIn'</em>\n</h3>\n<p>When you create an @Injectable service in Angular, you must choose where it should be added to the injector. In addition to the previous root and module options, you have two additional options.</p>\n<ul>\n<li>platform— Specifying providedIn: 'platform' makes the service available in a special singleton platform injector that is shared by all applications on the page.</li>\n<li>any— Provides a unique instance in every module (including lazy modules) that injects the token.</li>\n</ul>\n<p><a href=\"https://v9.angular.io/api/core/Injectable\">Learn more about providedIn</a> in our API documentation.</p>\n<h3>Component harnesses</h3>\n<p>Testing components has historically relied on using implementation details such as CSS selectors to find components and to trigger events. This meant that whenever a component library changed its implementation, all of the tests relying on those components would need to be updated.</p>\n<p>In version 9, we are introducing <em>component harnesses</em>, which offer an alternative way to test components. By abstracting away the implementation details, you can make sure your unit tests are correctly scoped and less brittle.</p>\n<p>Most of Angular Material’s components can now be tested via harnesses, and we are making harnesses available to any component author as part of the <a href=\"https://material.angular.io/cdk/categories\">Component Dev Kit</a> (CDK).</p>\n<p>Here’s an example test before harnesses:</p>\n<a href=\"https://medium.com/media/ecba92926e72f27a8848131c34f1f142/href\">https://medium.com/media/ecba92926e72f27a8848131c34f1f142/href</a><p>And the same test with harnesses:</p>\n<a href=\"https://medium.com/media/eaaaaa0a220d9ae0e5e7ad4a410030ba/href\">https://medium.com/media/eaaaaa0a220d9ae0e5e7ad4a410030ba/href</a><p>Learn more about <a href=\"https://v9.material.angular.io/guide/using-component-harnesses\">Material’s component harnesses</a> or <a href=\"https://material.angular.io/cdk/test-harnesses/overview\">building your own</a> with the CDK.</p>\n<h3>New components</h3>\n<p>You can now include capabilities from YouTube and Google Maps in your applications.</p>\n<ul>\n<li>You can render a YouTube Player inline within your application with the new<a href=\"https://github.com/angular/components/tree/master/src/youtube-player\"> youtube-player</a>. After you load the YouTube IFrame player API, this component will take advantage of it.</li>\n<li>We are also introducing <a href=\"https://github.com/angular/components/tree/master/src/google-maps\">google-maps</a> components. These components make it easy to render Google Maps, display markers, and wire up interactivity in a way that works like a normal Angular component, saving you from needing to learn the full <a href=\"https://developers.google.com/maps/documentation/javascript/tutorial\">Google Maps API</a>.</li>\n</ul>\n<h3>IDE &amp; language service improvements</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*EFcVVFKZKOshNNpJd9ot6g.gif\"><figcaption>Go to definition and improved Language Service demo</figcaption></figure><p>Significant improvements have been made to the Angular language service <a href=\"https://marketplace.visualstudio.com/items?itemName=Angular.ng-template\">extension</a> on the Visual Studio Marketplace. Along with major architectural overhaul to address performance and stability issues, many long-standing bugs have also been fixed. Besides that, some new features include:</p>\n<ul>\n<li>TextMate grammar for Angular Template Syntax, which now enables syntax highlighting in both inline and external templates</li>\n<li>“Go to definition” for templateUrl and styleUrls</li>\n<li>NgModule and type information in hover tooltip</li>\n</ul>\n<h3>TypeScript 3.7 support</h3>\n<p>Angular has been updated to work with TypeScript 3.6 and 3.7, including the extremely popular <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">optional chaining</a> feature in TypeScript 3.7. To stay in sync with the ecosystem, we’ve also updated our version of other ecosystem dependencies such as Zone.JS and RxJS.</p>\n<h3>Thank you to the community</h3>\n<p>This release is the culmination of over 2 years of work. We’re really excited about the future and possibilities that this work opens up. This wouldn’t be possible without the work of hundreds of people in the community.</p>\n<p>v9 Contributors:</p>\n<p>Aaron Frost, Adam J. Penn, Adam Plumer, Adam Vigneaux, Adrien Crivelli, Ajit Singh, Alain Chautard, Alan Agius, Alexander Ivanov, Alexander von Weiss, Alex Eagle, Alex Rickabaugh, alexzuza, Ali Mirlou, Alison Gale, Alyssa Nicoll, Amadou Sall, AMarinov, Amit Dubey, Anders Kjær Damgaard, Andrew Kushnir, Andrew Scott, Andrew Seguin, Andrius, Andrus Diaz, Ankit Prajapati, Aravind, Aristeidis Bampakos, Arne Hoek, Artur Androsovych, arturovt, Atef Ben Ali, Ayaz Hafiz, Ben Elliott, Benjamin Liii, Brian Michalski, CaerusKaru, Carlos Ortiz García, Cédric Exbrayat, Charles Lyding, Christian Liebel, Christopher Dahm, codingnuclei, Colum Ferry, Craig Spence, cran-cg, crisbeto, Cyrille Tuzi, Daniele Morosinotto, Daniel Waxweiler, Danny Skoog, David Sánchez, David Shevitz, Denis Omelkov, Denys Vuika, Diego Juliao, dishanfernando, Dmitri Ischenko, Dominik Pieper, Do Nhu Vy, Doug Parker, Dyma, EddyP23, Edy Segura, Eliran Eliassy, Elvis Begovic, Emmanuel DEMEY, Ephraim, Erik Pintar, Esteban Gehring, Eusen, Evan Martin, FabianGosebrink, FaustmannChr, FDIM, Ferdinand Malcher, FG-33, Filipe Silva, Gabor Szekely, Gabriel Medeiros Coelho, GavinMK, Geoff Bass, George Kalpakas, Gérôme Grignon, ghiscoding, Girma Nigusse, Greg Magolan, Grigoriy Beziuk, hafiz, Harinder Singh, Hayouung, Hoel IRIS, horn, idzark, Igor Minar, Issei Horie, ivanwonder, Jakub Pawlot, James Vickery, Jan Malchert, Jason Bedard, Jeff Held, Jennifer Fell, Jeremy Elbourn, JiaLiPassion, Jithil P Ponnan, jnavb, Joakim Zebic, Joey Perrott, john li, John Ralph Umandal, Jonathan Sharpe, Joost Koehoorn, Jordan Amman, Jordan Nelson, Joshua Colvin, Judy Bogart, J Z, Kai Röder, Kapunahele Wong, Kara Erickson, katryo, Kayla Altepeter, Keen Yee Liau, ketangote, Kirk Larkin, Koala, Kristina Gocheva, kristinavavrova, Kristiyan Kostadinov, Kwinten Pisman, Kyle J. Kemp, Lars Gyrup Brink Nielsen, LASLEDJ, lazarljubenovic, Leonardo Zizzamia, Leon Radley, Luka Petrovic, Mansour Fall, manzonif, Mark Goho, Martina Kraus, Martin Probst, Matias Niemelä, Matthew Harris, Matt Janssen, Mayur Barge, mbehrlich, mertdeg2, Michael Maier, Michael Nahkies, Michael Prentice, Michał Koziara, Mike Brocchi, Mike Casebolt, mikef, Miles Malerba, Minko Gechev, Mirco Widmer, Misko Hevery, Miško Hevery, Mitchell Skaggs, mohax, Muhammad Umair, Muhammad Umair Khan, Nathan Tate, Németh Tamás, Nicolas Villanueva, Nikita Potapenko, Niklas Merz, noeri, Noopur, NothingEverHappens, ODAVING, Olegas Goncarovas, Olivier Combe, Orlando Pozo, owenmecham, Pascal Fivian, paulceli, Paul Gschwendtner, Pawel Kozlowski, Pete Bacon Darwin, Phaneendra, philonor, Pierre-Yves FARE, Piotr Błażejewicz, Potapy4, Rado Kirov, Ralf D. Müller, Raz Luvaton, Reuben Wilson, Richard Lea, Rick Katka, Robert Coie, Robin Dupret, Roy, Rudar Daman Singla, Rustam, Sachin, Sahan Serasinghe, Sam Julien, Santosh Yadav, Sasha Rudan, Sergey Koshechkin, Sergey Nikitin, Shibasish, Sholka Jadav, Showtim3, ShubhrankR, Simon Jespersen, Simon Kurtz, skrikl, Smartin, Sonu Kapoor, Srichandradeep Choudarapu, Sriram Jayarman, Stefanie Fluin, Stephen Cooper, Stephen Fluin, Suguru Inatomi, Suresh918, Syu Kato, thanhpd, thekiba, TheMushr00m, Tiep Phan, Timar, Tim Deschryver, TinyMan, Tom Kwong, Tom Sullivan, Trevor Karjanis, Troels Lenda, Turtuvshin Byambaa, Vanessa Schmitt, Victor, Vikash Dahiya, Vikram Subramanian, Wagner Maciel, Wataru Kasahara, Wenqi, why520crazy, willbeaufoy, William Lohan, WreckItRalph, Yann Bertrand, Younes Jaaidi, Yulia Tsareva, Zaid Al-Omari, zuckjet, 陈旭.</p>\n<p>We would also like to thank our GDEs and the community at large. The feedback, issue reports, and reproductions we receive are essential to holding our work to the highest quality standards. There are already over 4000 public Angular apps using version 9.</p>\n<p>Special thanks to our long term enterprise collaborator <a href=\"https://github.com/pkozlowski-opensource\">Pawel Kozlowski</a> and his sponsor <a href=\"https://amadeus.com/\">Amadeus</a>. Pawel made a huge quantity of contributions with exceptional quality over the 2 years of the Ivy project that have been a critical part of the project’s success.</p>\n<p>If you have feedback on this release, please <a href=\"https://github.com/angular/angular/issues/new/choose\">file an issue</a>, or <a href=\"https://twitter.com/angular\">let us know</a>!</p>\n<p>I personally want to thank Igor and Kara, as huge sections of this blog post were written by them.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=23c97b63cfa3\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/version-9-of-angular-now-available-project-ivy-has-arrived-23c97b63cfa3\">Version 9 of Angular Now Available— Project Ivy has arrived!</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "javascript",
      "angular",
      "debugging",
      "release-notes",
      "web-development"
    ]
  },
  {
    "title": "When your dependencies break your software, wouldn’t you like them to fix it?",
    "pubDate": "2019-11-27 22:50:23",
    "link": "https://blog.angular.io/how-we-use-angular-at-the-gdf-cd17807a9bd2?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/cd17807a9bd2",
    "author": "AllianzGlobalDigitalFactory",
    "thumbnail": "https://cdn-images-1.medium.com/max/900/1*QnezsZgTyTAp_EDOY4xAbQ.png",
    "description": "\n<p>We at <a href=\"https://www.linkedin.com/showcase/global-digital-factory-allianz/\">Allianz Global Digital Factory</a> (GDF) use the tooling of Angular to keep our ecosystem in sync. Our main asset is our user interface (UI) component library, that enables teams in Allianz to use ready made UI components for building their apps. The main techniques we use are <a href=\"https://angular.io/guide/schematics\"><em>Schematics</em></a><em> </em>and <a href=\"https://angular.io/cli/update\"><em>ng update</em></a>. This is something already well established when using Angular itself (e.g., <a href=\"https://medium.com/airfrance-klm/how-we-upgraded-a-website-with-half-a-billion-annual-users-to-angular-7-in-less-then-a-day-71de33a1108e\">KLM story</a>). Here we want to share our journey of utilizing such a tool stack for our Allianz ecosystem.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*QnezsZgTyTAp_EDOY4xAbQ.png\"><figcaption>Approaches for major library updates</figcaption></figure><p>Imagine that the power lines in your bathroom need rewiring. A craftsman comes in, removes the tiles, fixes the wiring, seals the wall, but then runs off with the tiles lying on the bathroom floor. Not cool, right? This is pretty much what happens when software libraries ship breaking changes. They take care of improving some internal wiring but you (the application developers) are left cleaning up the parts glued on top.</p>\n<p>For the team shipping a library this somehow works, since they don’t feel the overall workload of cleaning up after the breaking change. For the teams using the library it’s painful but seen as an inevitable part of a developer’s life. From a bird’s-eye perspective, however, this is also bad for the library team, since their ecosystem runs out of sync. Leading to different versions that have to be maintained, teams missing out on new capabilities, increasing efforts, decreasing velocity — in short a fragile and inefficient ecosystem. Angular has the tool stack to help out here, turning updates of most applications into a one-liner. Which is what the Angular team provides for their core library:</p>\n<pre><strong>ng update @angular/cli @angular/core</strong></pre>\n<p>At the GDF, we wanted to leverage this for our UI component library. Our library is used within Allianz for client facing and internal applications throughout hundreds of repositories. When moving to Angular 8 we had several breaking changes planned, for instance, changed import paths, two components were replaced by a single new component and multiple API options were removed.</p>\n<p>This time, however, we didn’t want to burden our library users with adapting to these changes manually. We wanted to provide the same experience as the Angular team for our UI component library (named ngx-ndbx):</p>\n<pre><strong>ng update @allianz/ngx-ndbx</strong></pre>\n<h4><strong>Crafting the updater</strong></h4>\n<p>How did we do that? First, we needed a mapping for every breaking change as basis for an automated migration. In our case this part was straight forward and we could write down all breaking changes as logical mappings.</p>\n<p>The second part was to setup the structure. We added this directly into our component library, along with the UI components. For testing we setup a local infrastructure using <a href=\"https://github.com/verdaccio/verdaccio\">Verdaccio</a>. This provides a lightweight npm server to check the process before publishing.</p>\n<p>The last setup step was to decide how to traverse and manipulate Typescript and HTML. For TypeScript we used the TypeScript compiler API and the TypeScript AST Viewer. For HTML a common parser was sufficient. With this structure in place we started writing Schematics for all our breaking changes.</p>\n<p>While doing this we found more edge cases than we had initially anticipated. For instance, unit tests and the programmatic use of components had to be considered. To harden our Schematics we ran tests on different real applications. After several iterations we were confident that we had covered the main use cases. At that point we could ship the major release!</p>\n<p>Looking back we did have some bumps and small detours. One of the bigger changes was that we started with TSLint and ended up writing our own snippets for mapping code. The main reason for this was that on large projects our TSLint had long execution times and TSLint will be deprecated and replaced by <a href=\"https://medium.com/palantir/tslint-in-2019-1a144c2317a9\">ESLint</a>. For setting up the Schematics we defined our mappings in a JSON file and wrote a number of smaller helper functions to perform them, thereby borrowing a page from Angular Material.</p>\n<p>What definitely took some time was getting comfortable with understanding mappings in AST. Especially, since there can be different patterns that have to be considered for mapping all changes. To sum it up, especially for <strong>ng update</strong>, you should plan some time to get comfortable with the AST and to check if you have covered all relevant cases that might occur in applications.</p>\n<a href=\"https://medium.com/media/115d0367be3b69b7a350f2f968e5339f/href\">https://medium.com/media/115d0367be3b69b7a350f2f968e5339f/href</a><h4><strong>Aftermath</strong></h4>\n<p>So what happened after the release? The release is now several months back and so far we have received only positive feedback. All Allianz teams reported an easy update to version 8, for both Angular and our UI library. In most cases, the whole update was reported to have taken under one hour. We also found out that many teams were still manually updating out library. In most cases, they didn’t know about ng update and simply walked the path they were used to. Overall, we were really happy with the result.</p>\n<p>At this stage we wanted to look closer at what was happening in our ecosystem. One of our changes was to remove two deprecated components (A &amp; B) and to replace them with a new consolidated one. When we deprecated the old components, their numbers stayed stable. So teams were picking up the new component, but they didn’t take the time to replace the old component. This was not surprising, since teams want to focus on delivery and not spend valuable time on removing deprecated components.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*q4aH_kuft3CMMg3-yMCkrg.png\"><figcaption>Example of component migration done for you by ng update.</figcaption></figure><p>With the release of version 8 we removed those components, forcing a decrease of the deprecated components. In the past, teams needed to invest time to manually replace the components. Now with <strong>ng update</strong> we are replacing the deprecated components automatically. This is a big gain for both library and application developers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/624/1*8--hOJWN8L0AeXiwCz4Emw.png\"><figcaption><em>Component A and B are replaced by Components C.</em></figcaption></figure><p><strong>But how can this be translated for stakeholders not deeply involved in technical topics?</strong></p>\n<p>To help with this, we can sketch a simple case, using rough numbers that reflect our experience. If we look at our last major update, we estimate the manual update effort to be about one workday (8 hours). If we assume that 100 applications are updated, we end up at an overall effort of 800 hours. With ng update we assume each update to take one hour, which leads to a saving of 700 hours. Writing the Schematics for our UI library, on the other hand, took us about 200 hours, including setting up the Schematics infrastructure. With this simple case, we get a more than 3-fold return on invest. At scale and from a total cost perspective automating updates is saving money and this view doesn’t even factor in the additional benefits arising from a well synchronized ecosystem.</p>\n<p>An important driver for GDF — besides cost reduction — was to shorten the time it takes us (the UI library team) from a request we get, to the point where the respective change is productive in a real application.</p>\n<p>One of the main problems was that it could take quite a while for teams to adopt if they were on an older major version. Automating updates significantly reduces this time, improving our ability to ship changes faster into real applications. In addition, we can remove technical debt throughout a whole ecosystem without a big burden for the app teams. This also shifts attention from individual application silos to the ecosystem as a whole. While the cost savings of automated updating are obviously greater in a large scale environment, this technique allows any library editor to decide how and if breaking changes are handled — if you want to clean up after you broke something. This opens a new door for library developers.</p>\n<p>Many thanks to the Allianz UI library team — currently preparing the next Schematics for upcoming version 9.</p>\n<p>Check out <a href=\"https://globaldigitalfactory.allianz.com/blog.html\">our blog</a> for more information and <a href=\"https://globaldigitalfactory.allianz.com/blog/developing-digital-allianz-solutions-made-easy-with-the-page-flo.html\">how we use Angular</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cd17807a9bd2\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/how-we-use-angular-at-the-gdf-cd17807a9bd2\">When your dependencies break your software, wouldn’t you like them to fix it?</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<p>We at <a href=\"https://www.linkedin.com/showcase/global-digital-factory-allianz/\">Allianz Global Digital Factory</a> (GDF) use the tooling of Angular to keep our ecosystem in sync. Our main asset is our user interface (UI) component library, that enables teams in Allianz to use ready made UI components for building their apps. The main techniques we use are <a href=\"https://angular.io/guide/schematics\"><em>Schematics</em></a><em> </em>and <a href=\"https://angular.io/cli/update\"><em>ng update</em></a>. This is something already well established when using Angular itself (e.g., <a href=\"https://medium.com/airfrance-klm/how-we-upgraded-a-website-with-half-a-billion-annual-users-to-angular-7-in-less-then-a-day-71de33a1108e\">KLM story</a>). Here we want to share our journey of utilizing such a tool stack for our Allianz ecosystem.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/900/1*QnezsZgTyTAp_EDOY4xAbQ.png\"><figcaption>Approaches for major library updates</figcaption></figure><p>Imagine that the power lines in your bathroom need rewiring. A craftsman comes in, removes the tiles, fixes the wiring, seals the wall, but then runs off with the tiles lying on the bathroom floor. Not cool, right? This is pretty much what happens when software libraries ship breaking changes. They take care of improving some internal wiring but you (the application developers) are left cleaning up the parts glued on top.</p>\n<p>For the team shipping a library this somehow works, since they don’t feel the overall workload of cleaning up after the breaking change. For the teams using the library it’s painful but seen as an inevitable part of a developer’s life. From a bird’s-eye perspective, however, this is also bad for the library team, since their ecosystem runs out of sync. Leading to different versions that have to be maintained, teams missing out on new capabilities, increasing efforts, decreasing velocity — in short a fragile and inefficient ecosystem. Angular has the tool stack to help out here, turning updates of most applications into a one-liner. Which is what the Angular team provides for their core library:</p>\n<pre><strong>ng update @angular/cli @angular/core</strong></pre>\n<p>At the GDF, we wanted to leverage this for our UI component library. Our library is used within Allianz for client facing and internal applications throughout hundreds of repositories. When moving to Angular 8 we had several breaking changes planned, for instance, changed import paths, two components were replaced by a single new component and multiple API options were removed.</p>\n<p>This time, however, we didn’t want to burden our library users with adapting to these changes manually. We wanted to provide the same experience as the Angular team for our UI component library (named ngx-ndbx):</p>\n<pre><strong>ng update @allianz/ngx-ndbx</strong></pre>\n<h4><strong>Crafting the updater</strong></h4>\n<p>How did we do that? First, we needed a mapping for every breaking change as basis for an automated migration. In our case this part was straight forward and we could write down all breaking changes as logical mappings.</p>\n<p>The second part was to setup the structure. We added this directly into our component library, along with the UI components. For testing we setup a local infrastructure using <a href=\"https://github.com/verdaccio/verdaccio\">Verdaccio</a>. This provides a lightweight npm server to check the process before publishing.</p>\n<p>The last setup step was to decide how to traverse and manipulate Typescript and HTML. For TypeScript we used the TypeScript compiler API and the TypeScript AST Viewer. For HTML a common parser was sufficient. With this structure in place we started writing Schematics for all our breaking changes.</p>\n<p>While doing this we found more edge cases than we had initially anticipated. For instance, unit tests and the programmatic use of components had to be considered. To harden our Schematics we ran tests on different real applications. After several iterations we were confident that we had covered the main use cases. At that point we could ship the major release!</p>\n<p>Looking back we did have some bumps and small detours. One of the bigger changes was that we started with TSLint and ended up writing our own snippets for mapping code. The main reason for this was that on large projects our TSLint had long execution times and TSLint will be deprecated and replaced by <a href=\"https://medium.com/palantir/tslint-in-2019-1a144c2317a9\">ESLint</a>. For setting up the Schematics we defined our mappings in a JSON file and wrote a number of smaller helper functions to perform them, thereby borrowing a page from Angular Material.</p>\n<p>What definitely took some time was getting comfortable with understanding mappings in AST. Especially, since there can be different patterns that have to be considered for mapping all changes. To sum it up, especially for <strong>ng update</strong>, you should plan some time to get comfortable with the AST and to check if you have covered all relevant cases that might occur in applications.</p>\n<a href=\"https://medium.com/media/115d0367be3b69b7a350f2f968e5339f/href\">https://medium.com/media/115d0367be3b69b7a350f2f968e5339f/href</a><h4><strong>Aftermath</strong></h4>\n<p>So what happened after the release? The release is now several months back and so far we have received only positive feedback. All Allianz teams reported an easy update to version 8, for both Angular and our UI library. In most cases, the whole update was reported to have taken under one hour. We also found out that many teams were still manually updating out library. In most cases, they didn’t know about ng update and simply walked the path they were used to. Overall, we were really happy with the result.</p>\n<p>At this stage we wanted to look closer at what was happening in our ecosystem. One of our changes was to remove two deprecated components (A &amp; B) and to replace them with a new consolidated one. When we deprecated the old components, their numbers stayed stable. So teams were picking up the new component, but they didn’t take the time to replace the old component. This was not surprising, since teams want to focus on delivery and not spend valuable time on removing deprecated components.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*q4aH_kuft3CMMg3-yMCkrg.png\"><figcaption>Example of component migration done for you by ng update.</figcaption></figure><p>With the release of version 8 we removed those components, forcing a decrease of the deprecated components. In the past, teams needed to invest time to manually replace the components. Now with <strong>ng update</strong> we are replacing the deprecated components automatically. This is a big gain for both library and application developers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/624/1*8--hOJWN8L0AeXiwCz4Emw.png\"><figcaption><em>Component A and B are replaced by Components C.</em></figcaption></figure><p><strong>But how can this be translated for stakeholders not deeply involved in technical topics?</strong></p>\n<p>To help with this, we can sketch a simple case, using rough numbers that reflect our experience. If we look at our last major update, we estimate the manual update effort to be about one workday (8 hours). If we assume that 100 applications are updated, we end up at an overall effort of 800 hours. With ng update we assume each update to take one hour, which leads to a saving of 700 hours. Writing the Schematics for our UI library, on the other hand, took us about 200 hours, including setting up the Schematics infrastructure. With this simple case, we get a more than 3-fold return on invest. At scale and from a total cost perspective automating updates is saving money and this view doesn’t even factor in the additional benefits arising from a well synchronized ecosystem.</p>\n<p>An important driver for GDF — besides cost reduction — was to shorten the time it takes us (the UI library team) from a request we get, to the point where the respective change is productive in a real application.</p>\n<p>One of the main problems was that it could take quite a while for teams to adopt if they were on an older major version. Automating updates significantly reduces this time, improving our ability to ship changes faster into real applications. In addition, we can remove technical debt throughout a whole ecosystem without a big burden for the app teams. This also shifts attention from individual application silos to the ecosystem as a whole. While the cost savings of automated updating are obviously greater in a large scale environment, this technique allows any library editor to decide how and if breaking changes are handled — if you want to clean up after you broke something. This opens a new door for library developers.</p>\n<p>Many thanks to the Allianz UI library team — currently preparing the next Schematics for upcoming version 9.</p>\n<p>Check out <a href=\"https://globaldigitalfactory.allianz.com/blog.html\">our blog</a> for more information and <a href=\"https://globaldigitalfactory.allianz.com/blog/developing-digital-allianz-solutions-made-easy-with-the-page-flo.html\">how we use Angular</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cd17807a9bd2\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/how-we-use-angular-at-the-gdf-cd17807a9bd2\">When your dependencies break your software, wouldn’t you like them to fix it?</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "angular",
      "components",
      "schematics",
      "breaking-changes",
      "frontend"
    ]
  },
  {
    "title": "Building Accessibility in Angular Applications",
    "pubDate": "2019-11-07 00:00:27",
    "link": "https://blog.angular.io/accessibility-in-angular-e84f73a223f?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/e84f73a223f",
    "author": "Zama Khan Mohammed",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*Ic7kUV1ZufRtCwqsrbBS_g.png",
    "description": "\n<h3>Accessibility in Angular Applications</h3>\n<p>Guest Author: <a href=\"https://twitter.com/mohamedzamakhan\">Zama Khan Mohammed</a>, Software Architect, Author of <a href=\"https://angularprojects.com/\">Angular Projects</a> book.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ic7kUV1ZufRtCwqsrbBS_g.png\"><figcaption><em>Hug illustration is taken from </em><a href=\"https://icons8.com/ouch/illustration/hug\"><em>icon8</em></a></figcaption></figure><p>Many software development teams focus and prioritize software architecture, performance, security, testability, and maintainability of the software but often forget to value the importance of accessibility.</p>\n<blockquote>Accessibility should never be an afterthought! Everyone should be a stakeholder in it; developers, designers, and of course the testers.</blockquote>\n<p>An analysis was brought up by WebAIM, called <a href=\"https://webaim.org/projects/million/\">WebAIM Million</a> in February 2019. It analyzed the accessibility of the top million website’s homepages and to their shock, found out 98.7% of them didn’t meet the <a href=\"https://www.w3.org/TR/WCAG20/\">WCAG 2 Conformance</a> (Web Content Accessibility Guidelines). When looking at the results, advocating for accessibility and teaching about it in software teams becomes significant.</p>\n<p>The Angular team values Accessibility, but a framework by itself cannot guarantee accessibility out of the box. The Angular Components team at Google has been developing high-quality Angular Components and the Angular CDK (Component Development Kit), which includes several tools to improve accessibility.</p>\n<p>Now let’s look at what accessibility issues are involved in building a Single Page Application and how Angular and the Angular CDK assist developers in solving some of them.</p>\n<h3>Designing for accessibility</h3>\n<p>Accessibility should begin from the UI design phase. Designers should consider building color palettes such that the color contrast that meets the accessibility standards. To make reading easier for users, they need to choose the right typography (with the use of <a href=\"https://css-tricks.com/rem-global-em-local/\">relative units for font sizes</a>). Create simple animations and interactions so that users with cognitive issues do not face problems in reading and understanding the content of the application. Responsive Design also helps make sure that the application is accessible in various devices that the users might access the website from.</p>\n<p><strong>Design for High Contrast Users</strong>: Make sure that your design is accessible for Windows’ High Contrast mode users. The Angular CDK provides a mixin <a href=\"https://material.angular.io/cdk/a11y/overview#targeting-high-contrast-users\">cdk-high-contrast</a> to style differently if required for such users.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*63Lh91suUnZIZxeQ\"><figcaption><em>Example usage of LiveAnnouncer from</em><a href=\"https://material.angular.io/cdk/a11y/overview\"><em> Angular Material</em></a><em> documentation</em></figcaption></figure><p><strong>Live Announcement</strong>: Announcing any updates that occur dynamically in the application is important for visually impaired users. We can use LiveAnnouncer provided by Angular CDK, which uses the aria-live region to announce messages.</p>\n<h3>Use Semantic HTML</h3>\n<p>Many accessibility issues can be solved by using native elements with proper semantics. This also helps in boosting the SEO of the application. Some rules to keep in mind are:</p>\n<ul>\n<li>Use semantic tags like nav, aside, main, section, fieldset, header, footer etc. instead of just using div and span’s.</li>\n<li>Use the correct order for headings (h1-h6).</li>\n<li>Use alt attribute on img element.</li>\n<li>Use button’s for clickables. If a non-interactive element is used for the click event, make sure to add key events for keyboard accessibility.</li>\n<li>Associate label with the form control.</li>\n<li>Avoid positive tabindex .</li>\n<li>Add captions for video and audio.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/870/0*vZ-41tc8m-DBBwOI\"><figcaption>Example showing usage of aria attributes from <a href=\"https://github.com/momentum-design/momentum-ui/blob/586eb7ca88f145201ca19fc23db62239f444d472/angular/src/lib/tabs/tab.component.ts#L16\">momentum-ui </a>library</figcaption></figure><p><strong>Use ARIA attributes</strong>: Use native elements whenever possible. If the native element does not meet your requirements and if you have decided to create a Rich UI component, then use aria attributes to make them accessible. Using it incorrectly can affect negatively, that’s why make sure you familiarize yourself with <a href=\"http://w3c.github.io/aria-practices/\">ARIA Authoring Practices</a>. It describes aria attributes you need to focus on building various custom UI components. Furthermore, you can use aria states rather than adding a class to style elements in the Rich UI components. This makes sure that the screen reader users can interact with the UI components and you don’t have duplicate style identifiers.</p>\n<p><strong>Page Titles and Descriptions</strong>: Page titles are a part of HTML’s head. So since Single Page Applications have a single HTML file, i.e., index.html, it requires only a single title tag, but its content should vary across pages. To do this easily, Angular assists you with a Title service and Meta service to update them.</p>\n<h3>Optimizing accessibility for interactions</h3>\n<p><strong>Keyboard Navigation</strong>: Keyboard navigation is critical for many users who have motor disabilities. Making sure that the tab order is in a logical order will help users navigate the website using just the keyboard. When considering Keyboard Navigation, we need to be aware that TAB key is not the only key we need to support, there are other keys that you have to account for (Refer <a href=\"http://w3c.github.io/aria-practices/\">ARIA Authoring Practices</a>). Angular CDK provides ListKeyManager to help maintain keyboard interaction for components such as menus, dropdowns, selects, list boxes, etc.</p>\n<p><strong>Focus Management</strong>: Knowing where the focus goes while using the application is really important for accessibility because we want users who do not use a mouse (screen reader/keyboard users) to be directed to the right place when an interaction occurs or when the route changes. To force the focus on an element, you can use the focus method of a DOM node. However, this could get quite complicated in advanced use cases. The Angular CDK provides the FocusManager and the FocusTrap services to handle them. Focus Management also comprises of trapping the focus within a particular container, especially in modal dialogs and drawers. You want the focus to enter inside such components and not leave it until it closes. Angular CDK provides FocusTrap class as well as cdkFocusTrap directive to trap the focus. You might also want to consider <a href=\"https://webaim.org/techniques/skipnav/\">Skip Navigation</a> to help users skip the navigation and go to the content directly.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4t2cov6Pjv0itmeD\"><figcaption><em>Example </em><em>showing usage of FocusKeyManager from “</em><a href=\"https://angularprojects.com/\"><em>Angular Projects</em></a><em>” book</em></figcaption></figure><h3>Codelyzer and accessibility</h3>\n<p>Codelyzer is included in all the Angular CLI projects. Enable the<a href=\"https://web.dev/accessible-angular-with-codelyzer\"> accessibility rules</a> to detect a few common accessibility issues in Angular templates. In the video below, you can see how it detects issues in the template at the development time.</p>\n<a href=\"https://medium.com/media/e41d91670aa556ec10c31d13c57fc471/href\">https://medium.com/media/e41d91670aa556ec10c31d13c57fc471/href</a><h3>Conclusion</h3>\n<p>Accessibility is a must for all web applications and it should be considered from Day 1 in the project development lifecycle. The Angular team provides tools to make it easier to create Accessible Components, and now it’s time for developers to utilize them and create accessible Angular applications.</p>\n<h3>Further Readings</h3>\n<ul>\n<li><a href=\"https://material.angular.io/cdk/a11y/overview\">Angular CDK’s accessibility package</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/navigating-content\">Semantics and Navigating Content</a></li>\n<li><a href=\"https://medium.com/ngconf/new-accessibility-rules-in-codelyzer-v5-0-0-85eec1d3e9bb\">New Accessibility Rules in Codelyzer</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=HtTyRajRuyY&amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g\">A11ycast by Rob Dodson</a></li>\n<li><a href=\"https://angular.io/guide/accessibility\">Angular Guide: Accessibility in Angular</a></li>\n<li><a href=\"https://web.dev/keyboard-access/\">Keyboard access fundamentals</a></li>\n<li><a href=\"https://www.udacity.com/course/web-accessibility--ud891\">Udacity’s Free Course: Web Accessibility by Google</a></li>\n<li><a href=\"https://www.gatsbyjs.org/blog/2019-07-11-user-testing-accessible-client-routing/\">What we learned from user testing of accessible client-side routing techniques with Fable Tech Labs</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e84f73a223f\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/accessibility-in-angular-e84f73a223f\">Building Accessibility in Angular Applications</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<h3>Accessibility in Angular Applications</h3>\n<p>Guest Author: <a href=\"https://twitter.com/mohamedzamakhan\">Zama Khan Mohammed</a>, Software Architect, Author of <a href=\"https://angularprojects.com/\">Angular Projects</a> book.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Ic7kUV1ZufRtCwqsrbBS_g.png\"><figcaption><em>Hug illustration is taken from </em><a href=\"https://icons8.com/ouch/illustration/hug\"><em>icon8</em></a></figcaption></figure><p>Many software development teams focus and prioritize software architecture, performance, security, testability, and maintainability of the software but often forget to value the importance of accessibility.</p>\n<blockquote>Accessibility should never be an afterthought! Everyone should be a stakeholder in it; developers, designers, and of course the testers.</blockquote>\n<p>An analysis was brought up by WebAIM, called <a href=\"https://webaim.org/projects/million/\">WebAIM Million</a> in February 2019. It analyzed the accessibility of the top million website’s homepages and to their shock, found out 98.7% of them didn’t meet the <a href=\"https://www.w3.org/TR/WCAG20/\">WCAG 2 Conformance</a> (Web Content Accessibility Guidelines). When looking at the results, advocating for accessibility and teaching about it in software teams becomes significant.</p>\n<p>The Angular team values Accessibility, but a framework by itself cannot guarantee accessibility out of the box. The Angular Components team at Google has been developing high-quality Angular Components and the Angular CDK (Component Development Kit), which includes several tools to improve accessibility.</p>\n<p>Now let’s look at what accessibility issues are involved in building a Single Page Application and how Angular and the Angular CDK assist developers in solving some of them.</p>\n<h3>Designing for accessibility</h3>\n<p>Accessibility should begin from the UI design phase. Designers should consider building color palettes such that the color contrast that meets the accessibility standards. To make reading easier for users, they need to choose the right typography (with the use of <a href=\"https://css-tricks.com/rem-global-em-local/\">relative units for font sizes</a>). Create simple animations and interactions so that users with cognitive issues do not face problems in reading and understanding the content of the application. Responsive Design also helps make sure that the application is accessible in various devices that the users might access the website from.</p>\n<p><strong>Design for High Contrast Users</strong>: Make sure that your design is accessible for Windows’ High Contrast mode users. The Angular CDK provides a mixin <a href=\"https://material.angular.io/cdk/a11y/overview#targeting-high-contrast-users\">cdk-high-contrast</a> to style differently if required for such users.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*63Lh91suUnZIZxeQ\"><figcaption><em>Example usage of LiveAnnouncer from</em><a href=\"https://material.angular.io/cdk/a11y/overview\"><em> Angular Material</em></a><em> documentation</em></figcaption></figure><p><strong>Live Announcement</strong>: Announcing any updates that occur dynamically in the application is important for visually impaired users. We can use LiveAnnouncer provided by Angular CDK, which uses the aria-live region to announce messages.</p>\n<h3>Use Semantic HTML</h3>\n<p>Many accessibility issues can be solved by using native elements with proper semantics. This also helps in boosting the SEO of the application. Some rules to keep in mind are:</p>\n<ul>\n<li>Use semantic tags like nav, aside, main, section, fieldset, header, footer etc. instead of just using div and span’s.</li>\n<li>Use the correct order for headings (h1-h6).</li>\n<li>Use alt attribute on img element.</li>\n<li>Use button’s for clickables. If a non-interactive element is used for the click event, make sure to add key events for keyboard accessibility.</li>\n<li>Associate label with the form control.</li>\n<li>Avoid positive tabindex .</li>\n<li>Add captions for video and audio.</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/870/0*vZ-41tc8m-DBBwOI\"><figcaption>Example showing usage of aria attributes from <a href=\"https://github.com/momentum-design/momentum-ui/blob/586eb7ca88f145201ca19fc23db62239f444d472/angular/src/lib/tabs/tab.component.ts#L16\">momentum-ui </a>library</figcaption></figure><p><strong>Use ARIA attributes</strong>: Use native elements whenever possible. If the native element does not meet your requirements and if you have decided to create a Rich UI component, then use aria attributes to make them accessible. Using it incorrectly can affect negatively, that’s why make sure you familiarize yourself with <a href=\"http://w3c.github.io/aria-practices/\">ARIA Authoring Practices</a>. It describes aria attributes you need to focus on building various custom UI components. Furthermore, you can use aria states rather than adding a class to style elements in the Rich UI components. This makes sure that the screen reader users can interact with the UI components and you don’t have duplicate style identifiers.</p>\n<p><strong>Page Titles and Descriptions</strong>: Page titles are a part of HTML’s head. So since Single Page Applications have a single HTML file, i.e., index.html, it requires only a single title tag, but its content should vary across pages. To do this easily, Angular assists you with a Title service and Meta service to update them.</p>\n<h3>Optimizing accessibility for interactions</h3>\n<p><strong>Keyboard Navigation</strong>: Keyboard navigation is critical for many users who have motor disabilities. Making sure that the tab order is in a logical order will help users navigate the website using just the keyboard. When considering Keyboard Navigation, we need to be aware that TAB key is not the only key we need to support, there are other keys that you have to account for (Refer <a href=\"http://w3c.github.io/aria-practices/\">ARIA Authoring Practices</a>). Angular CDK provides ListKeyManager to help maintain keyboard interaction for components such as menus, dropdowns, selects, list boxes, etc.</p>\n<p><strong>Focus Management</strong>: Knowing where the focus goes while using the application is really important for accessibility because we want users who do not use a mouse (screen reader/keyboard users) to be directed to the right place when an interaction occurs or when the route changes. To force the focus on an element, you can use the focus method of a DOM node. However, this could get quite complicated in advanced use cases. The Angular CDK provides the FocusManager and the FocusTrap services to handle them. Focus Management also comprises of trapping the focus within a particular container, especially in modal dialogs and drawers. You want the focus to enter inside such components and not leave it until it closes. Angular CDK provides FocusTrap class as well as cdkFocusTrap directive to trap the focus. You might also want to consider <a href=\"https://webaim.org/techniques/skipnav/\">Skip Navigation</a> to help users skip the navigation and go to the content directly.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4t2cov6Pjv0itmeD\"><figcaption><em>Example </em><em>showing usage of FocusKeyManager from “</em><a href=\"https://angularprojects.com/\"><em>Angular Projects</em></a><em>” book</em></figcaption></figure><h3>Codelyzer and accessibility</h3>\n<p>Codelyzer is included in all the Angular CLI projects. Enable the<a href=\"https://web.dev/accessible-angular-with-codelyzer\"> accessibility rules</a> to detect a few common accessibility issues in Angular templates. In the video below, you can see how it detects issues in the template at the development time.</p>\n<a href=\"https://medium.com/media/e41d91670aa556ec10c31d13c57fc471/href\">https://medium.com/media/e41d91670aa556ec10c31d13c57fc471/href</a><h3>Conclusion</h3>\n<p>Accessibility is a must for all web applications and it should be considered from Day 1 in the project development lifecycle. The Angular team provides tools to make it easier to create Accessible Components, and now it’s time for developers to utilize them and create accessible Angular applications.</p>\n<h3>Further Readings</h3>\n<ul>\n<li><a href=\"https://material.angular.io/cdk/a11y/overview\">Angular CDK’s accessibility package</a></li>\n<li><a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/navigating-content\">Semantics and Navigating Content</a></li>\n<li><a href=\"https://medium.com/ngconf/new-accessibility-rules-in-codelyzer-v5-0-0-85eec1d3e9bb\">New Accessibility Rules in Codelyzer</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=HtTyRajRuyY&amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g\">A11ycast by Rob Dodson</a></li>\n<li><a href=\"https://angular.io/guide/accessibility\">Angular Guide: Accessibility in Angular</a></li>\n<li><a href=\"https://web.dev/keyboard-access/\">Keyboard access fundamentals</a></li>\n<li><a href=\"https://www.udacity.com/course/web-accessibility--ud891\">Udacity’s Free Course: Web Accessibility by Google</a></li>\n<li><a href=\"https://www.gatsbyjs.org/blog/2019-07-11-user-testing-accessible-client-routing/\">What we learned from user testing of accessible client-side routing techniques with Fable Tech Labs</a></li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e84f73a223f\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/accessibility-in-angular-e84f73a223f\">Building Accessibility in Angular Applications</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "materials",
      "accessibility",
      "codelyzer",
      "semanticweb",
      "angular"
    ]
  },
  {
    "title": "Announcing the Capacitor ngAdd Schematic",
    "pubDate": "2019-11-04 17:57:06",
    "link": "https://blog.angular.io/announcing-the-capacitor-ngadd-schematic-732fd90f40fa?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/732fd90f40fa",
    "author": "Mike Hartington",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/1*_QSvxuDwVTbzZcXjU-cPDA.png",
    "description": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_QSvxuDwVTbzZcXjU-cPDA.png\"></figure><p>Today, we at Ionic are happy to share the release of Angular Schematics for Capacitor. Let’s take a look at what Capacitor is and how to add it to an Angular project.</p>\n<h3>Capacitor overview</h3>\n<p>First off, let’s go over what Capacitor is and how it relates to other cross platform projects out there.</p>\n<p>At a glance, Capacitor follows many of the same ideas as Apache Cordova.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bNEifHlIXo9vqy6AfDfCCg.png\"></figure><p>There is a Web layer that renders the app and a native layer that listens for calls to Native APIs. Within those layers are many technical decisions that make the overall developer and user experience much smoother.</p>\n<ul>\n<li>Unified API that makes cross-platform development easier</li>\n<li>Native Platforms are not distribution targets, but are committed to version control and can be edited by the developer.</li>\n<li>Modern native build tools and libraries, such as Cocoapods, Android Libraries, Xcode and Android Studio, provide more visibility into native project changes and better app maintainability.</li>\n<li>Utilize npm and modern JS tooling to simplify adding core plugins and creating new ones.</li>\n</ul>\n<p>These principles bring the best of web development and native development with little to no friction for developers.</p>\n<h3>Capacitor and Angular integration</h3>\n<p>Capacitor itself is made up of 2 packages, the core functionality (@capacitor/core) and the CLI (@capacitor/cli). To add Capacitor to your project, let’s start with a simple Angular App from the Angular CLI.</p>\n<pre>ng new capApp --routing --style css<br>cd capApp</pre>\n<p>With the app created, let’s add Capacitor to our project.</p>\n<pre>ng add <a href=\"http://twitter.com/capacitor/angular\">@capacitor/angular</a></pre>\n<p>With this, developers can add Capacitor to their project with ease.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ECzcmj_Wfe3uCL4vtVM9rQ.gif\"></figure><p>When the schematic is done running, developers should build our app, and run npx cap add &lt;ios,android&gt; or yarn cap add &lt;ios, android&gt; and our Xcode or Android Studio projects will be created!</p>\n<pre>ng run capApp:build<br>npx cap add ios</pre>\n<h3>Pulling back the curtain</h3>\n<p>So what is the schematic actually doing behind the scenes?</p>\n<ul><li>Installing Capacitor Dependencies</li></ul>\n<p>First, it adds Capacitor dependencies to the package.json: Core and CLI.</p>\n<ul><li>Installs dependencies</li></ul>\n<p>This will just do a quick npm (or yarn) install then make sure we have the Core and CLI packages for Capacitor.</p>\n<ul><li>Run Capacitor CLI’s init script and create the scaffolding needed.</li></ul>\n<p>To make sure that the Capacitor project understands your Angular project, the schematic infers a lot of data based on your angular.json. It will read your app's name and use that when creating the iOS and Android projects, as well as read the build folder so it knows where to copy your web code when preparing the native projects. This means that your Capacitor project will feel like a natural extension of your Angular project.</p>\n<p>Once added, we do a build of our app, and deploy to either iOS, Android, web, or Electron. For building to iOS or Android, you’ll need to have the native SDKs and tools installed. For a detailed guide on this, see this guide for <a href=\"https://ionicframework.com/docs/installation/ios\">iOS</a> and this guide for <a href=\"https://ionicframework.com/docs/installation/android\">Android</a></p>\n<h3>Parting thoughts</h3>\n<p>While Capacitor is fairly new, we’re already seeing a lot of developers <a href=\"https://npmcharts.com/compare/@capacitor/core\">adopt it and be successful with it</a>. If you’d like to know more about Capacitor, be sure to visit the <a href=\"https://capacitor.ionicframework.com/docs/\">official docs</a>. If you’re interested in providing some feedback on the <a href=\"https://www.npmjs.com/package/@capacitor/angular\">@capacitor/angular</a> package and the ngAdd experience, please open an issue on the <a href=\"https://github.com/ionic-team/capacitor-angular-toolkit\">repository</a>, or just send me a <a href=\"https://twitter.com/mhartington\">tweet</a> 😄.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=732fd90f40fa\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/announcing-the-capacitor-ngadd-schematic-732fd90f40fa\">Announcing the Capacitor ngAdd Schematic</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_QSvxuDwVTbzZcXjU-cPDA.png\"></figure><p>Today, we at Ionic are happy to share the release of Angular Schematics for Capacitor. Let’s take a look at what Capacitor is and how to add it to an Angular project.</p>\n<h3>Capacitor overview</h3>\n<p>First off, let’s go over what Capacitor is and how it relates to other cross platform projects out there.</p>\n<p>At a glance, Capacitor follows many of the same ideas as Apache Cordova.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bNEifHlIXo9vqy6AfDfCCg.png\"></figure><p>There is a Web layer that renders the app and a native layer that listens for calls to Native APIs. Within those layers are many technical decisions that make the overall developer and user experience much smoother.</p>\n<ul>\n<li>Unified API that makes cross-platform development easier</li>\n<li>Native Platforms are not distribution targets, but are committed to version control and can be edited by the developer.</li>\n<li>Modern native build tools and libraries, such as Cocoapods, Android Libraries, Xcode and Android Studio, provide more visibility into native project changes and better app maintainability.</li>\n<li>Utilize npm and modern JS tooling to simplify adding core plugins and creating new ones.</li>\n</ul>\n<p>These principles bring the best of web development and native development with little to no friction for developers.</p>\n<h3>Capacitor and Angular integration</h3>\n<p>Capacitor itself is made up of 2 packages, the core functionality (@capacitor/core) and the CLI (@capacitor/cli). To add Capacitor to your project, let’s start with a simple Angular App from the Angular CLI.</p>\n<pre>ng new capApp --routing --style css<br>cd capApp</pre>\n<p>With the app created, let’s add Capacitor to our project.</p>\n<pre>ng add <a href=\"http://twitter.com/capacitor/angular\">@capacitor/angular</a></pre>\n<p>With this, developers can add Capacitor to their project with ease.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ECzcmj_Wfe3uCL4vtVM9rQ.gif\"></figure><p>When the schematic is done running, developers should build our app, and run npx cap add &lt;ios,android&gt; or yarn cap add &lt;ios, android&gt; and our Xcode or Android Studio projects will be created!</p>\n<pre>ng run capApp:build<br>npx cap add ios</pre>\n<h3>Pulling back the curtain</h3>\n<p>So what is the schematic actually doing behind the scenes?</p>\n<ul><li>Installing Capacitor Dependencies</li></ul>\n<p>First, it adds Capacitor dependencies to the package.json: Core and CLI.</p>\n<ul><li>Installs dependencies</li></ul>\n<p>This will just do a quick npm (or yarn) install then make sure we have the Core and CLI packages for Capacitor.</p>\n<ul><li>Run Capacitor CLI’s init script and create the scaffolding needed.</li></ul>\n<p>To make sure that the Capacitor project understands your Angular project, the schematic infers a lot of data based on your angular.json. It will read your app's name and use that when creating the iOS and Android projects, as well as read the build folder so it knows where to copy your web code when preparing the native projects. This means that your Capacitor project will feel like a natural extension of your Angular project.</p>\n<p>Once added, we do a build of our app, and deploy to either iOS, Android, web, or Electron. For building to iOS or Android, you’ll need to have the native SDKs and tools installed. For a detailed guide on this, see this guide for <a href=\"https://ionicframework.com/docs/installation/ios\">iOS</a> and this guide for <a href=\"https://ionicframework.com/docs/installation/android\">Android</a></p>\n<h3>Parting thoughts</h3>\n<p>While Capacitor is fairly new, we’re already seeing a lot of developers <a href=\"https://npmcharts.com/compare/@capacitor/core\">adopt it and be successful with it</a>. If you’d like to know more about Capacitor, be sure to visit the <a href=\"https://capacitor.ionicframework.com/docs/\">official docs</a>. If you’re interested in providing some feedback on the <a href=\"https://www.npmjs.com/package/@capacitor/angular\">@capacitor/angular</a> package and the ngAdd experience, please open an issue on the <a href=\"https://github.com/ionic-team/capacitor-angular-toolkit\">repository</a>, or just send me a <a href=\"https://twitter.com/mhartington\">tweet</a> 😄.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=732fd90f40fa\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/announcing-the-capacitor-ngadd-schematic-732fd90f40fa\">Announcing the Capacitor ngAdd Schematic</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "capacitor",
      "ionic-framework",
      "hybrid-app-development",
      "angular",
      "javascript"
    ]
  },
  {
    "title": "The Angular Team @ AngularConnect 2019",
    "pubDate": "2019-10-17 15:56:01",
    "link": "https://blog.angular.io/the-angular-team-angularconnect-2019-b23be3762ccb?source=rss----447683c3d9a3---4",
    "guid": "https://medium.com/p/b23be3762ccb",
    "author": "Stephen Fluin",
    "thumbnail": "https://cdn-images-1.medium.com/max/1024/0*YmACHzhcWOUpJl2w",
    "description": "\n<p>It was our pleasure to attend AngularConnect again this year and to talk to hundreds of amazing engineers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YmACHzhcWOUpJl2w\"></figure><p>This year the team focused on sharing insights and opening the curtain into some of the internals of how Angular works and the challenges we are taking on as a team.</p>\n<h3>Day 1 Keynote</h3>\n<a href=\"https://medium.com/media/9d572bdf17361262c050a37f883c52c4/href\">https://medium.com/media/9d572bdf17361262c050a37f883c52c4/href</a><p><a href=\"https://twitter.com/igorminar\">Igor Minar</a> and <a href=\"https://twitter.com/stephenfluin\">I</a> shared some of the momentum we are seeing in the community. We talked about the number of global Angular conferences continuing to grow. We worked with Deutsche Bank and Allianz to share their stories of how they are using Angular to drive developer productivity across their companies.</p>\n<p>We also shared some of the plans for version 9. Ivy is intended to be the default as of version 9. There will be an opt-out option in 9. To accommodate this, library authors should continue shipping ViewEngine compiled libraries and metadata to <a href=\"https://www.npmjs.com/\">npm</a>.</p>\n<p><a href=\"https://g.co/ng/ac2019\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=6Zfk0OcFGn4\">Video</a></p>\n<h3>Deep Dive into the Angular Compiler</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=anphffaCZrQ\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NwiRbbpaZgOvALH5\"></a><figcaption>Alex Rickabaugh on stage at AngularConnect 2019</figcaption></figure><p>The Angular compiler allows developers to write declarative templates that combine HTML, components, directives, and more for a great developer experience. The compiler takes these templates and turns them into JavaScript instructions that are executed at runtime.</p>\n<p><a href=\"https://twitter.com/synalx\">Alex Rickabaugh</a> covers how @NgModule really works. He explains what metadata.json files are and reveals the biggest “secrets” of the compiler.</p>\n<p><a href=\"https://slides.com/alexrickabaugh/deep-dive-into-the-angular-compiler#/\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=anphffaCZrQ\">Video</a></p>\n<h3>My Journey on the Angular Team — The process mistakes and lessons learned from 3 years of building Angular</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=XV_2XJ0rZC8\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OBeHa2IcQE6h38jP\"></a><figcaption>Manu Murthy on stage at AngularConnect 2019</figcaption></figure><p>Through <a href=\"https://twitter.com/manu_murthy\">Manu Murthy</a>’s story of joining the Angular team, he shares some of the biggest mistakes we’ve made and the things that the Angular team has learned about how to manage the process of building great open source software.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1GkuhmOUczuq_viaZo36gzFU0tyBs4pRkQ6Pzmo6tzMk/preview\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=XV_2XJ0rZC8\">Video</a></p>\n<h3>How We Make Angular Fast</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=EqSRpkMRyY4\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BDFvCZPqm8s1Al5O\"></a><figcaption>Misko Hevery onstage at AngularConnect 2019</figcaption></figure><p><a href=\"https://twitter.com/mhevery\">Miško Hevery</a> has been leading our efforts to make the new Angular runtime fast. In his talk he shares the foundational challenges we face when it comes to JavaScript optimization and the work that we’re putting in to make Angular fast so that users have a great time with Angular applications.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1o5W1sOaQ0HaPqleGCWy8cukgM5NhhRZWpx2E6KKrc10/preview\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=EqSRpkMRyY4\">Video</a></p>\n<h3>Day 2 Keynote</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=-Y3A_RCHoqg\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*uggtKq6pUOUWOah3\"></a><figcaption>Minko Gechev onstage at AngularConnect 2019</figcaption></figure><p><a href=\"https://twitter.com/mgechev\">Minko Gechev</a> shared the best practices for using Angular and showed how the Angular team is partnering with other technologies to provide great integrated experiences.</p>\n<p><a href=\"https://speakerdeck.com/mgechev/angularconnect-2nd-day-keynote\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=-Y3A_RCHoqg\">Video</a></p>\n<h3><strong>How Angular Works</strong></h3>\n<figure><a href=\"https://www.youtube.com/watch?v=S0o-4yc2n-8\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*F2BO8__Q6vSUZniT\"></a><figcaption>Kara Erickson onstage at AngularConnect 2019</figcaption></figure><p>As framework lead for Angular, <a href=\"https://twitter.com/karaforthewin\">Kara Erickson</a> deals with many of the critical pieces of the Angular platform to provide developers the best experience. In this talk, she demystifies how change detection works and explains what really happens while your Angular application is running.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1l3GLCqitNQ5G6fgS59gsUkD_EGnIwdnuWP-tKYrxmEI/preview\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=S0o-4yc2n-8\">Video</a></p>\n<h3>Power in Constraints</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=X-Dn5ZBUZH0\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4c1vJku9RTnTEjsT\"></a><figcaption>Rado Kirov onstage at AngularConnect 2019</figcaption></figure><p>From the TypeScript team at Google, <a href=\"https://twitter.com/radokirov\">Rado Kirov</a> shared insights into the way that system constraints can frustrate in the short term, but lead to better velocity and maintainability in the long term.</p>\n<p><a href=\"http://bit.ly/2kSQbs2\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=X-Dn5ZBUZH0\">Video</a></p>\n<h3>GitHub at Scale: How Angular Manages Community Contributions and Repositories</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=RaQDoDj3G8k\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*v2zEJYi2X4W5WTAE\"></a><figcaption>Joey Perrott onstage at AngularConnect 2019</figcaption></figure><p>The Angular team manages one of the largest open source projects on GitHub, but to do this successfully we have to find and build great tools to help. <a href=\"https://twitter.com/joeyperrott\">Joey Perrott</a> shares how the Angular team operates and continues to improve our developer infrastructure.</p>\n<p><a href=\"http://bit.ly/github-at-scale-ac19\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=RaQDoDj3G8k\">Video</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b23be3762ccb\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/the-angular-team-angularconnect-2019-b23be3762ccb\">The Angular Team @ AngularConnect 2019</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "content": "\n<p>It was our pleasure to attend AngularConnect again this year and to talk to hundreds of amazing engineers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*YmACHzhcWOUpJl2w\"></figure><p>This year the team focused on sharing insights and opening the curtain into some of the internals of how Angular works and the challenges we are taking on as a team.</p>\n<h3>Day 1 Keynote</h3>\n<a href=\"https://medium.com/media/9d572bdf17361262c050a37f883c52c4/href\">https://medium.com/media/9d572bdf17361262c050a37f883c52c4/href</a><p><a href=\"https://twitter.com/igorminar\">Igor Minar</a> and <a href=\"https://twitter.com/stephenfluin\">I</a> shared some of the momentum we are seeing in the community. We talked about the number of global Angular conferences continuing to grow. We worked with Deutsche Bank and Allianz to share their stories of how they are using Angular to drive developer productivity across their companies.</p>\n<p>We also shared some of the plans for version 9. Ivy is intended to be the default as of version 9. There will be an opt-out option in 9. To accommodate this, library authors should continue shipping ViewEngine compiled libraries and metadata to <a href=\"https://www.npmjs.com/\">npm</a>.</p>\n<p><a href=\"https://g.co/ng/ac2019\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=6Zfk0OcFGn4\">Video</a></p>\n<h3>Deep Dive into the Angular Compiler</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=anphffaCZrQ\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*NwiRbbpaZgOvALH5\"></a><figcaption>Alex Rickabaugh on stage at AngularConnect 2019</figcaption></figure><p>The Angular compiler allows developers to write declarative templates that combine HTML, components, directives, and more for a great developer experience. The compiler takes these templates and turns them into JavaScript instructions that are executed at runtime.</p>\n<p><a href=\"https://twitter.com/synalx\">Alex Rickabaugh</a> covers how @NgModule really works. He explains what metadata.json files are and reveals the biggest “secrets” of the compiler.</p>\n<p><a href=\"https://slides.com/alexrickabaugh/deep-dive-into-the-angular-compiler#/\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=anphffaCZrQ\">Video</a></p>\n<h3>My Journey on the Angular Team — The process mistakes and lessons learned from 3 years of building Angular</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=XV_2XJ0rZC8\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*OBeHa2IcQE6h38jP\"></a><figcaption>Manu Murthy on stage at AngularConnect 2019</figcaption></figure><p>Through <a href=\"https://twitter.com/manu_murthy\">Manu Murthy</a>’s story of joining the Angular team, he shares some of the biggest mistakes we’ve made and the things that the Angular team has learned about how to manage the process of building great open source software.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1GkuhmOUczuq_viaZo36gzFU0tyBs4pRkQ6Pzmo6tzMk/preview\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=XV_2XJ0rZC8\">Video</a></p>\n<h3>How We Make Angular Fast</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=EqSRpkMRyY4\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*BDFvCZPqm8s1Al5O\"></a><figcaption>Misko Hevery onstage at AngularConnect 2019</figcaption></figure><p><a href=\"https://twitter.com/mhevery\">Miško Hevery</a> has been leading our efforts to make the new Angular runtime fast. In his talk he shares the foundational challenges we face when it comes to JavaScript optimization and the work that we’re putting in to make Angular fast so that users have a great time with Angular applications.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1o5W1sOaQ0HaPqleGCWy8cukgM5NhhRZWpx2E6KKrc10/preview\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=EqSRpkMRyY4\">Video</a></p>\n<h3>Day 2 Keynote</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=-Y3A_RCHoqg\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*uggtKq6pUOUWOah3\"></a><figcaption>Minko Gechev onstage at AngularConnect 2019</figcaption></figure><p><a href=\"https://twitter.com/mgechev\">Minko Gechev</a> shared the best practices for using Angular and showed how the Angular team is partnering with other technologies to provide great integrated experiences.</p>\n<p><a href=\"https://speakerdeck.com/mgechev/angularconnect-2nd-day-keynote\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=-Y3A_RCHoqg\">Video</a></p>\n<h3><strong>How Angular Works</strong></h3>\n<figure><a href=\"https://www.youtube.com/watch?v=S0o-4yc2n-8\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*F2BO8__Q6vSUZniT\"></a><figcaption>Kara Erickson onstage at AngularConnect 2019</figcaption></figure><p>As framework lead for Angular, <a href=\"https://twitter.com/karaforthewin\">Kara Erickson</a> deals with many of the critical pieces of the Angular platform to provide developers the best experience. In this talk, she demystifies how change detection works and explains what really happens while your Angular application is running.</p>\n<p><a href=\"https://docs.google.com/presentation/d/1l3GLCqitNQ5G6fgS59gsUkD_EGnIwdnuWP-tKYrxmEI/preview\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=S0o-4yc2n-8\">Video</a></p>\n<h3>Power in Constraints</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=X-Dn5ZBUZH0\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*4c1vJku9RTnTEjsT\"></a><figcaption>Rado Kirov onstage at AngularConnect 2019</figcaption></figure><p>From the TypeScript team at Google, <a href=\"https://twitter.com/radokirov\">Rado Kirov</a> shared insights into the way that system constraints can frustrate in the short term, but lead to better velocity and maintainability in the long term.</p>\n<p><a href=\"http://bit.ly/2kSQbs2\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=X-Dn5ZBUZH0\">Video</a></p>\n<h3>GitHub at Scale: How Angular Manages Community Contributions and Repositories</h3>\n<figure><a href=\"https://www.youtube.com/watch?v=RaQDoDj3G8k\"><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*v2zEJYi2X4W5WTAE\"></a><figcaption>Joey Perrott onstage at AngularConnect 2019</figcaption></figure><p>The Angular team manages one of the largest open source projects on GitHub, but to do this successfully we have to find and build great tools to help. <a href=\"https://twitter.com/joeyperrott\">Joey Perrott</a> shares how the Angular team operates and continues to improve our developer infrastructure.</p>\n<p><a href=\"http://bit.ly/github-at-scale-ac19\">Slides</a> &amp; <a href=\"https://www.youtube.com/watch?v=RaQDoDj3G8k\">Video</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b23be3762ccb\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https://blog.angular.io/the-angular-team-angularconnect-2019-b23be3762ccb\">The Angular Team @ AngularConnect 2019</a> was originally published in <a href=\"https://blog.angular.io/\">Angular Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n",
    "enclosure": {},
    "categories": [
      "javascript",
      "angular",
      "web-development",
      "conference",
      "community"
    ]
  }
]
